<?php/* * This file is part of the IdeaToLife package. * * (c) Youssef Jradeh <youssef.jradeh@ideatolife.me> * */namespace App\Http\Controllers\App\Form;use App\Http\Controllers\WhoController;use App\Models\Form;use App\Models\FormInstance;use App\Models\SurveillanceFormInstance;use App\Models\Question;use App\Models\QuestionAnswer;use App\Models\SurveillanceQuestionAnswer;use App\Models\QuestionOption;use Intervention\Image\Facades\Image;use Illuminate\Support\Facades\Mail;class FormController extends WhoController {	public $generatedIds = [];	public $questionMultiple = [];	protected $permissions = [		"get"   => ["code" => "forms", "action" => "read"],		"store" => ["code" => "forms", "action" => "write"],	];	/**	 *	 * @return array	 */	protected static function validationRules() {		return [			'store' => [				'lat'        => 'required',				'lng'        => 'required',				'site_id'    => 'required|exists:site_references,id',				'cluster_id' => 'required|exists:cluster_references,id',				'form_id'    => 'sometimes',			],		];	}	/**	 * Get the Form and its details.	 *	 * @return \Illuminate\Http\Response	 */	public function get($id)        {            //calling the form type the to centralized function to retrieve the form            $form = \App\Types\FormType::getForm($id);            if (!$form) {                    return $this->failed("Invalid Form Id");            }            return $this->successData($form);	}        /**	 * Get the Form Mobile data and its details.	 *	 * @return \Illuminate\Http\Response	 */	public function getMobileData($id)        {            //calling the form type the to centralized function to retrieve the form            $form = \App\Models\PushToMobile::where("form_id", $id)->orderBy("id", "desc")->pluck("response_data")->first();            if (!$form) {                    return $this->failed("Invalid Form Id");            }            return $this->successData(json_decode($form));	}        /**	 * Get the Form Mobile data and its details.	 *	 * @return \Illuminate\Http\Response	 */	public function getSurveillanceData()        {                $diseaseId = request("disease_id");                $projectId = request("project_id");                $userId = ($this->user->id > 0)?$this->user->id:(int)@request("user_id");                $form = \App\Models\Form::where("project_id", $projectId)->first();                $disease = \App\Models\DiseaseBank::where("id", $diseaseId)->first();                if($disease){                    $formCategory = \App\Models\FormCategory::where("form_id", $form->id)->where("name_en", "LIKE", $disease->appearance_name_en)->first();                    if (!$formCategory) {                        return $this->failed("Invalid project Id");                    }                }else                    return $this->failed("Invalid disease Id");                $formTypeId = (int)@$formCategory->form_type_id;                $formData = \App\Models\PushToMobile::where("form_id", $form->id)->orderBy("id", "desc")->pluck("response_data")->first();		if (!$formData) {			return $this->failed("Invalid Project Id");		}else                    $formData = json_decode($formData);                $tempFormData['id'] = $formData->id;                $tempFormData['project_id'] = $formData->project_id;                $tempFormData['is_mobile'] = $formData->is_mobile;                $locationCount = \App\Models\SurveillanceLocation::where("user_id", $userId)->count();                $locationDetails = \App\Models\ProjectLocationDetail::where("project_id", $projectId)->where("user_id", $userId)->count();                foreach ($formData->types as $type){                    //if($type->name_en != 'Parameter Disease' && $type->parameter_type != 'verification'){                    if(in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name'))){                        $type->skip = ($locationCount>0 && $locationDetails == 0 && @in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name')))?true:false;                        $tempFormData['types'][] = $type;                    }                }                $FormTypeData = \App\Models\FormType::find($formTypeId);                $FormTypeData->skip = false;                $FormTypeData['categories'] = \App\Models\FormCategory::where("id", $formCategory->id)->with(["groups.questions.options",'groups.questions.skipLogic.skipLogicDetails',"groups.questions.questionSettingOptions","groups.questions.questionSettingAppearance","groups.questions.questionAssignment"])->get();                array_push($tempFormData['types'], $FormTypeData);                foreach ($formData->types as $type){                    if(isset($type->parameter_type) && !in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name')) && ($type->parameter_type == 'collection' && $type->name_en != "Parameter Disease")){                        $type->skip = ($locationCount>0 && $locationDetails == 0 && @in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name')))?true:false;                        $tempFormData['types'][] = $type;                    }                }                return $this->successData($tempFormData);	}	/**	 * It's the initial form submission to save all questions' answer	 * This is the important api for the mobile api	 *	 * @Form form	 *	 * @return \Illuminate\Http\Response	 */	public function store()        {		//the main data as a raw json containing everything		$data = $this->request->all();		//form id is the primary key of the form                if(isset($data['form_id']) && $data['form_id'] > 0)                    $form = Form::find($data['form_id']);		else if(isset($data['project_id']) && $data['project_id'] > 0)                    $form = Form::where("project_id", $data['project_id'])->first();                else                    $form = "";		//if form not exist return failed		//form should be create at the same time of the project creation		if (!$form || !$this->user) {			return $this->failed("Invalid Form or User");		}		//create form instance that relate linked		//the actual form and all the questions' answers		$formInstance = $this->saveNewInstance($form, $data);		//this can be changes however there is no validation on the number of answers		if (empty($data['answers'])) {			return $this->success();		}		//now let's loop over the answers		foreach ($data['answers'] AS $answer) {			//if no question id, continue without saving anything			//we might need to log this			if (empty($answer['question_id']) || !isset($answer['value'])) {				continue;			}			//get the question object from the database			$question = Question::with("responseType")			                    ->find($answer['question_id']);			if (!$question) {				continue;			}			//same question can be answered many time if it's an individual question			//we are using the chunk to differentiate the answers and to group them			$individualChunk = isset($answer['individual_chunk']) ? $answer['individual_chunk'] : 0;			//it might be an array ( multiple answers question type)			if (is_array($answer['value']) && $question->response_type_id != 15) {				//for each answer value add new record in the database				foreach ($answer['value'] AS $value) {					$this->addAnswer($formInstance, $question, $value, $individualChunk);				}			}			else {				//otherwise add one record				$this->addAnswer($formInstance, $question, $answer['value'], $individualChunk);			}		}                $formInstance->individual_count = $this->getIndividualCount($formInstance->id);                $formInstance->save();		//at the end return success		return $this->success();	}        /**	 * It's the initial form submission to save all questions' answer	 * This is the important api for the collector response to save	 *	 * @Form form	 *	 * @return \Illuminate\Http\Response	 */	public function saveSurveillanceAnswers()        {		//the main data as a raw json containing everything		$data = $this->request->all();                if(isset($data['instance_id']) && $data['instance_id'] > 0){                    $formInstance = SurveillanceFormInstance::find($data['instance_id']);                    $form = Form::where("project_id", $formInstance->project_id)->first();                    if($formInstance){                        $formInstance->instance_status = @$data['instance_status'];                        $formInstance->save();                        $diseaseId = $formInstance->disease_id;                        if(empty(@$data['governorate_id']) || empty(@$data['district_id']) || empty(@$data['site_id']) || empty(@$data['cluster_id']) || empty(@$data['instance_type'])){                            $data['governorate_id'] = $formInstance->governorate_id;                            $data['district_id'] = $formInstance->district_id;                            $data['site_id'] = $formInstance->site_id;                            $data['cluster_id'] = $formInstance->cluster_id;                        }                    }                }else{                    //form id is the primary key of the form                    if(isset($data['form_id']) && $data['form_id'] > 0)                        $form = Form::find($data['form_id']);                    else if(isset($data['project_id']) && $data['project_id'] > 0)                        $form = Form::where("project_id", $data['project_id'])->first();                    else                        $form = "";                    $diseaseId = (int)@$data['disease_id'];                }		//if form not exist return failed		//form should be create at the same time of the project creation		if (!$form || !$this->user) {			return $this->failed("Invalid Form or User");		}                if(empty(@$data['governorate_id']) || empty(@$data['district_id']) || empty(@$data['site_id']) || empty(@$data['cluster_id']) || empty(@$data['instance_type']))                    return $this->failed("Invalid User Locations.");                //check if question with age and gender exist                if (!empty($data['answers']) && strtolower($data['instance_status']) == 'submitted'){                    $requiredQuestions = Question::where("form_id",$form->id)                                                ->whereIn("name_en",["Age?","Gender?"])                                                ->whereIn("response_type_id",[1,4])                                                ->pluck("id","id")->toArray();                    $returnCounter = 0;                    $returnFlag = false;                    if(!empty($requiredQuestions)){                        foreach ($data['answers'] AS $answer) {                            if (!empty($answer['question_id']) && in_array($answer['question_id'], $requiredQuestions)){                                $returnFlag = true;                                $returnCounter ++;                            }                        }                        if($returnFlag == false || $returnCounter < 2)                            return $this->failed("Please answer first required questions!");                    }                }		//create form instance that relate linked		//the actual form and all the questions' answers                if(isset($data['instance_id']) && $data['instance_id'] > 0)                    SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $data['instance_id'])->delete();                else                    $formInstance = $this->saveNewSurveillanceInstance($form, $data);                if(isset($data['instance_status']) && strtolower($data['instance_status']) == 'submitted' && $diseaseId > 0){                    $disease = \App\Models\DiseaseBank::where("id", $diseaseId)->first();                    $levelsList = [];                    $timeList = [];                    $flag = 0;                    $flagVar = "";                    if($disease->district_confirmation != null && !empty($disease->district_confirmation)){                        $levelsList['DL'] = 'DL';                        $timeList['DL'] = ($flag == 0)?date('Y-m-d H:i:s'):NULL;                        $flag = 1;                        $flagVar = 'DL';                    }                    if($disease->laboratory_confirmation != null && !empty($disease->laboratory_confirmation)){                        $levelsList['LL'] = 'LL';                        $timeList['LL'] = ($flag == 0)?date('Y-m-d H:i:s'):NULL;                        if($flag == 0)                            $flagVar = 'LL';                        $flag = 1;                    }                    if($disease->clinical_confirmation != null && !empty($disease->clinical_confirmation)){                        $levelsList['CL'] = 'CL';                        $timeList['CL'] = ($flag == 0)?date('Y-m-d H:i:s'):NULL;                        if($flag == 0)                            $flagVar = 'CL';                        $flag = 1;                    }                    if($disease->higher_confirmation != null && !empty($disease->higher_confirmation)){                        $levelsList['HL'] = 'HL';                        $timeList['HL'] = ($flag == 0)?date('Y-m-d H:i:s'):NULL;                        if($flag == 0)                            $flagVar = 'HL';                        $flag = 1;                    }                    if(!empty($levelsList )){                        foreach($levelsList as $key => $level)                        {                            $diseaseVerification            = new \App\Models\DiseaseVerification();                            $diseaseVerification->disease_id   = $diseaseId;                            $diseaseVerification->surveillance_form_instance_id   = $formInstance->id;                            $diseaseVerification->project_id   = $formInstance->project_id;                            $diseaseVerification->user_id   = $this->user->id;                            if($disease->disease_type == 'weekly')                                $diseaseVerification->confirmation_level = NULL;                            else                                $diseaseVerification->confirmation_level = $level; //DL, LL, CL, HL                            if($flagVar == $level)                                $diseaseVerification->confirmation_status = 'pending';                            $diseaseVerification->date_start = date("Y-m-d H:i:s");                            $diseaseVerification->date_end = $this->getEndDate(date("Y-m-d H:i:s"), $diseaseId, $level);                            $diseaseVerification->save();                        }                    }else                        $this->store();                    if($disease->disease_type == 'immediate')                        $this->sendImmediateDiseaseNotification($disease->appearance_name_en, $formInstance);                }		//this can be changes however there is no validation on the number of answers		if (empty($data['answers'])) {			return $this->success();		}		//now let's loop over the answers		foreach ($data['answers'] AS $answer) {			//if no question id, continue without saving anything			//we might need to log this			if (empty($answer['question_id']) || !isset($answer['value'])) {				continue;			}			//get the question object from the database			$question = Question::with("responseType")			                    ->find($answer['question_id']);			if (!$question) {				continue;			}			//same question can be answered many time if it's an individual question			//we are using the chunk to differentiate the answers and to group them			$individualChunk = isset($answer['individual_chunk']) ? $answer['individual_chunk'] : 0;			//it might be an array ( multiple answers question type)			if (is_array($answer['value']) && $question->response_type_id != 15) {				//for each answer value add new record in the database				foreach ($answer['value'] AS $value) {					$this->addSurveillanceAnswer($formInstance, $question, $value, $individualChunk);				}			}			else {				//otherwise add one record				$this->addSurveillanceAnswer($formInstance, $question, $answer['value'], $individualChunk);			}		}                $formInstance->individual_count = $this->getIndividualCount($formInstance->id);                $formInstance->save();		//at the end return success		return $this->success();	}        /**	 * It's the initial form submission to save all questions' answer	 * This is the important api for the mobile api	 *	 * @Form form	 *	 * @return \Illuminate\Http\Response	 */	public function saveVerifierAnswers()        {		//the main data as a raw json containing everything		$data = $this->request->all();                $instanceId = (int)@$data['instance_id'];                $instance = SurveillanceFormInstance::find($instanceId);                if (!$instance) {			return $this->failed("Invalid instance id.");		}		//form id is the primary key of the form                if($instance)                   $form = Form::where("project_id", $instance->project_id)->first();                $verification = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)                                                                    ->whereIn("confirmation_status", ["in-progress","on-hold","saved"])                                                                    ->where("confirmed_by", $this->user->id)                                                                    ->first();		//create new form instance that relate linked		//the actual form and all the questions' answers                if($form){                    if($verification && $verification->verifier_instance_id > 0)                        $formInstance = SurveillanceFormInstance::find($verification->verifier_instance_id);                    else                        $formInstance             = new SurveillanceFormInstance();                    $formInstance->project_id = $form->project_id;                    $formInstance->user_id    = $this->user->id;                    $formInstance->lat        = $instance->lat;                    $formInstance->lng        = $instance->lng;                    $formInstance->site_id    = $instance->site_id;                    $formInstance->governorate_id = $instance->governorate_id;                    $formInstance->district_id = $instance->district_id;                    $formInstance->cluster_id = $instance->cluster_id;                    $formInstance->instance_type = @$data['instance_type'];                    $formInstance->instance_status = @$data['instance_status'];                    $formInstance->disease_id = @$data['disease_id'];                    $formInstance->date_start = ((isset($data['date_start']) && $data['date_start'] != "")?$data['date_start']:date('Y-m-d H:i:s'));                    $formInstance->date_end   = ((isset($data['date_end']) && $data['date_end'] != "")?$data['date_end']:date('Y-m-d H:i:s'));                    $formInstance->save();                }                $formInstance->individual_count = $this->getIndividualCount($formInstance->id);                $formInstance->save();                //update the instance level staus                if(isset($data['instance_status'])){                    if($verification){                        if(strtolower($data['instance_status']) == 'submitted')                            $verification->confirmation_status = "completed";                        else if(isset($data['instance_status']) && $data['instance_status'] != "")                            $verification->confirmation_status = @$data['instance_status'];                        $verification->verifier_instance_id = $formInstance->id;                        $verification->save();                    }                    if(strtolower($data['instance_status']) == 'submitted'){                        $secondVerificationCount = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)                                                                        ->whereNull("confirmation_status")                                                                        ->orWhere("confirmation_status", "")                                                                        ->count();                        //initiate second level                        if($secondVerificationCount > 0)                        {                            $secondVerification = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)                                                                        ->whereNull("confirmation_status")                                                                        ->orWhere("confirmation_status", "")                                                                        ->first();                            $secondVerification->confirmation_status = "pending";                            $secondVerification->save();                        }else{                            //////*********************************************************////                            //do push the collections of collector & verifier to results level//                            //////*********************************************************////                            $resultInstances = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)                                                                                ->pluck("verifier_instance_id","verifier_instance_id")->toArray();                            array_push($resultInstances, $instanceId);                            foreach($resultInstances as $resultInstanceId){                                $surveillanceInstance = SurveillanceFormInstance::find($resultInstanceId);                                $surveillanceInstanceAnswers = SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $resultInstanceId)->get();                                $resultInstance = new FormInstance();                                $resultInstance->project_id = $surveillanceInstance->project_id;                                $resultInstance->user_id    = $surveillanceInstance->user_id;                                $resultInstance->lat        = $surveillanceInstance->lat;                                $resultInstance->lng        = $surveillanceInstance->lng;                                $resultInstance->site_id    = $surveillanceInstance->site_id;                                $resultInstance->governorate_id = $surveillanceInstance->governorate_id;                                $resultInstance->district_id = $surveillanceInstance->district_id;                                $resultInstance->cluster_id = $surveillanceInstance->cluster_id;                                if($resultInstanceId != $instanceId)                                    $resultInstance->instance_type = 'verification';                                if($surveillanceInstance->date_start != "")                                $resultInstance->date_start = $surveillanceInstance->date_start;                                if($surveillanceInstance->date_end != "")                                $resultInstance->date_end   = $surveillanceInstance->date_end;                                $resultInstance->save();                                foreach($surveillanceInstanceAnswers as $surveillanceInstanceAnswer){                                    $this->addAnswer($resultInstance, Question::find($surveillanceInstanceAnswer->question_id), $surveillanceInstanceAnswer->value, $surveillanceInstanceAnswer->individual_chunk);                                }                            }                            $this->sendVerificationNotice($instance);                        }                    }                    else if(strtolower($data['instance_status']) == 'discard')                        $this->sendVerificationNotice($instance);                }                if($verification && $verification->verifier_instance_id > 0)                    SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$verification->verifier_instance_id)->delete();		//this can be changes however there is no validation on the number of answers		if (empty($data['answers'])) {			return $this->success();		}		//now let's loop over the answers		foreach ($data['answers'] AS $answer) {			//if no question id, continue without saving anything			//we might need to log this			if (empty($answer['question_id']) || !isset($answer['value'])) {				continue;			}			//get the question object from the database			$question = Question::with("responseType")			                    ->find($answer['question_id']);			if (!$question) {				continue;			}			//same question can be answered many time if it's an individual question			//we are using the chunk to differentiate the answers and to group them			$individualChunk = isset($answer['individual_chunk']) ? $answer['individual_chunk'] : 0;			//it might be an array ( multiple answers question type)			if (is_array($answer['value']) && $question->response_type_id != 15) {				//for each answer value add new record in the database				foreach ($answer['value'] AS $value) {					$this->addSurveillanceAnswer($formInstance, $question, $value, $individualChunk);				}			}			else {				//otherwise add one record				$this->addSurveillanceAnswer($formInstance, $question, $answer['value'], $individualChunk);			}		}		//at the end return success		return $this->success();	}        /**        * Adding new answer is based on the form instance, question id , value and chunk number if exist        *        * @param formInstance        * @param question        * @param value        * @param individualChunk        *        * @return \Illuminate\Http\Response        */	function addSurveillanceAnswer($formInstance, $question, $value, $individualChunk = 0)        {                if ($question->multiple) {                    if (empty($this->questionMultiple[$individualChunk][$question->id])) {                        $this->questionMultiple[$individualChunk][$question->id] = 1;                    } else {                        $this->questionMultiple[$individualChunk][$question->id] = $this->questionMultiple[$individualChunk][$question->id] + 1;                    }                }		$questionAnswer                   = new SurveillanceQuestionAnswer();		$questionAnswer->question_id      = $question->id;		$questionAnswer->project_id       = $formInstance->project_id;		$questionAnswer->surveillance_form_instance_id = $formInstance->id;		$questionAnswer->response_type_id = $question->response_type_id;		//if it's an image then let's convert it from base64 to actual image		if (in_array($question->responseType->code,			[				"image",				"signature_capture",			])) {			$this->saveImage($question, $value);		}		//check if this is a stopped answer		if ($value && in_array($question->responseType->code, [				"yes_no",				"multiple_choice",			])) {			$optionValue = QuestionOption::find($value);			if (!empty($optionValue)) {				if ($optionValue->stop_collect) {					$formInstance->stopped = 1;					$formInstance->save();				}			}		}		//otherwise it's an normal answer		$questionAnswer->value = json_encode($value);		//if the question is multiple then save the multiple in the database for later use		$questionAnswer->multiple = (int)@$question->multiple ? (int)@$this->questionMultiple[$individualChunk][$question->id] : 0;		//and finally the individual chunk		$questionAnswer->individual_chunk = $individualChunk;		$questionAnswer->save();	}	/**        * Adding new answer is based on the form instance, question id , value and chunk number if exist        *        * @param formInstance        * @param question        * @param value        * @param individualChunk        *        * @return \Illuminate\Http\Response        */	function addAnswer($formInstance, $question, $value, $individualChunk = 0)        {                if ($question->multiple) {                    if (empty($this->questionMultiple[$individualChunk][$question->id])) {                        $this->questionMultiple[$individualChunk][$question->id] = 1;                    } else {                        $this->questionMultiple[$individualChunk][$question->id] = $this->questionMultiple[$individualChunk][$question->id] + 1;                    }                }		$questionAnswer                   = new QuestionAnswer();		$questionAnswer->question_id      = $question->id;		$questionAnswer->project_id       = $formInstance->project_id;		$questionAnswer->form_instance_id = $formInstance->id;		$questionAnswer->response_type_id = $question->response_type_id;		//if it's an image then let's convert it from base64 to actual image		if (in_array($question->responseType->code,			[				"image",				"signature_capture",			])) {			$this->saveImage($question, $value);		}		//check if this is a stopped answer		if ($value && in_array($question->responseType->code, [				"yes_no",				"multiple_choice",			])) {			$optionValue = QuestionOption::find($value);			if (!empty($optionValue)) {				if ($optionValue->stop_collect) {					$formInstance->stopped = 1;					$formInstance->save();				}			}		}		//otherwise it's an normal answer		$questionAnswer->value = is_array($value)?json_encode($value):$value;		//if the question is multiple then save the multiple in the database for later use		$questionAnswer->multiple = (int)@$question->multiple ? (int)@$this->questionMultiple[$individualChunk][$question->id] : 0;		//and finally the individual chunk		$questionAnswer->individual_chunk = $individualChunk;		$questionAnswer->save();	}	/*        * converting the base64 to an actual image        * @param question        * @param Base        */	public function saveImage($question, $base64)        {		//if empty return empty, not sure if we may need to return an exception		if (empty($base64)) {			return "";		}		//generating a random file and specify the right folder		$fileName   = rand() . "-" . time() . ".png";		$folderPath = public_path('files/' . $question->id . "-" . $question->form_id);		//if folder not exist create it		if (!is_dir($folderPath)) {			mkdir($folderPath, 0777, TRUE);		}		$path = $folderPath . '/' . $fileName;		//finally save the image		try {			Image::make(file_get_contents($base64))->save($path);			return 'files/' . $question->id . "-" . $question->form_id . "/" . $fileName;		} catch (\Exception $e) {			return "";		}	}	/**        * @param $form        * @param $data        *        * @return \App\Models\FormInstance        */	private function saveNewInstance($form, $data) {		$formInstance             = new FormInstance();		$formInstance->project_id = $form->project_id;		$formInstance->user_id    = $this->user->id;		$formInstance->lat        = $data['lat'];//latitude of the current submission		$formInstance->lng        = $data['lng'];//longitude of the current submission		$formInstance->site_id    = $data['site_id'];//current site		$formInstance->governorate_id = $data['governorate_id'];		$formInstance->district_id = @$data['district_id'];		$formInstance->cluster_id = $data['cluster_id'];//and current cluster		try {			$formInstance->date_start = (@$data['date_start'] == "")?date('Y-m-d H:i'):@$data['date_start'];			$formInstance->date_end   = (@$data['date_end'] == "")?date('Y-m-d H:i:s', strtotime('+30 minutes', strtotime(date('Y-m-d H:i')))):@$data['date_end'];		} catch (\Exception $e) {			unset($formInstance->date_start);			unset($formInstance->date_end);		}		$formInstance->save();		return $formInstance;	}        /**	 * @param $form	 * @param $data	 *	 * @return \App\Models\FormInstance	 */	private function saveNewSurveillanceInstance($form, $data) {		$formInstance             = new SurveillanceFormInstance();		$formInstance->project_id = $form->project_id;		$formInstance->user_id    = $this->user->id;		$formInstance->lat        = @$data['lat'];//latitude of the current submission		$formInstance->lng        = @$data['lng'];//longitude of the current submission		$formInstance->site_id    = $data['site_id'];//current site		$formInstance->governorate_id = $data['governorate_id'];		$formInstance->district_id = @$data['district_id'];		$formInstance->cluster_id = $data['cluster_id'];//and current cluster                $formInstance->instance_type = @$data['instance_type'];                $formInstance->instance_status = @$data['instance_status'];                $formInstance->disease_id = @$data['disease_id'];		$formInstance->date_start = date("Y-m-d H:i:s");                $formInstance->date_end   = ((@$data['date_end'] == "")?date('Y-m-d H:i:s', strtotime('+30 minutes', strtotime(date('Y-m-d H:i')))):@$data['date_end']);                $formInstance->save();		return $formInstance;	}	/**	 * @param $id	 *	 * @return \App\Models\FormInstance	 */	private function getIndividualCount($id) {            $query = 'select max(qa.individual_chunk) as max from question_answers qa where qa.form_instance_id='.$id;            $queryResult = \DB::select($query);            $max = 0;            if (!empty($queryResult[0]) && isset($queryResult[0]->max)) {                $max = $queryResult[0]->max;            }            return $max;	}        /**        * Get the project instance end date        * @vars $startDate,$diseaseId,$confirmationLevel        * @return \Illuminate\Http\Response        */        private function getEndDate($startDate, $diseaseId, $confirmationLevel)        {            $disease = \App\Models\DiseaseBank::find($diseaseId);            if (!$disease) {               return $this->failed("Invalid disease id.");            }            $duration = '1 day - 24 hrs';            $noOfDays = ['1 day - 24 hrs'=>1, '2 days - 48 hrs'=>2, '3 days - 72 hrs'=>3, '7 days - 168 hrs'=>7, '14 days - 336 hrs'=>14, '1 month - 730 hrs'=>30, '2 months - 1460 hrs'=>60, '3 months - 2190 hrs'=>90];            if($confirmationLevel == 'DL')                $duration = $disease->district_confirmation;            else if($confirmationLevel == 'LL')                $duration = $disease->laboratory_confirmation;            else if($confirmationLevel == 'CL')                $duration = $disease->clinical_confirmation;            else if($confirmationLevel == 'HL')                $duration = $disease->higher_confirmation;            $days = (int)@$noOfDays[$duration];            $dateEnd =  date('Y-m-d H:i:s', strtotime($startDate. " + {$days} days"));            return $dateEnd;        }        /**        * Function send email on immediate disease collection        * @param $diseaseName        * @param $formInstance        */       public function sendImmediateDiseaseNotification($diseaseName, $formInstance)       {            $projectId = $formInstance->project_id;            $project = \App\Models\Project::find($projectId);            if(isset($project->created_by) && $project->created_by>0)            {                $user = \App\Models\User::find($project->created_by);                $sender = \App\Models\User::find($this->user->id);                $cluster = \App\Models\ClusterReference::find($formInstance->cluster_id);                $view = 'emails.immediate-disease';                $data['email'] = $user->username;                $data['user'] = $user->name;                $data['diseaseName'] = $diseaseName;                $data['collector'] = $sender->name;                $data['clusterName'] = "from the ".$cluster->name;                $data['cases'] = 1;                $data['dateTime'] = date("Y-m-d H:i:s");                $subject = 'Immediate Disease Case - '.$sender->name.' - '.$cluster->name;                Mail::send($view, $data, function ($message) use ($user, $sender, $subject) {                    $message->from($sender->email, $sender->name);                    //$message->replyTo($sender->email, $sender->name);                    $message->to($user->email)->subject($subject);                });            }       }       /**        * Function send email to owner when project verified        *        * @param $formInstance        */        public function sendVerificationNotice($formInstance)        {            $projectId = $formInstance->project_id;            $project = \App\Models\Project::find($projectId);            $verificationObj = \App\Models\DiseaseVerification::where("surveillance_form_instance_id",$formInstance->id)->whereNotNull("confirmation_level")->orderBy("id","desc")->first();            $level = $verificationObj->confirmation_level;            $levelList = ['DL'=>'verifier', 'LL'=>'laboratory', 'CL'=>'clinic', 'HL'=>'higher_verification'];            if(isset($project->created_by) && $project->created_by>0)            {                $user = \App\Models\User::find($project->created_by);                $verifier = \App\Models\User::find($this->user->id);                $disease = \App\Models\DiseaseBank::find($formInstance->disease_id);                $view = 'emails.verification-notice';                $data['email'] = $user->username;                $data['user'] = $user->name;                $data['diseaseName'] = @$disease->appearance_name_en;                $data['verifier'] = $verifier->name;                $data['formId'] = $formInstance->id;                $data['projectName'] = $project->name;                $data['level'] = @$levelList[$level];                $data['status'] = $verificationObj->confirmation_status;                $subject = 'Verified Case Status - '.@$disease->appearance_name_en.' - '.$project->name.' - '.$verifier->name.' - '.@$levelList[$level];                Mail::send($view, $data, function ($message) use ($user, $verifier, $subject) {                    $message->from($verifier->email, $verifier->name);                    //$message->replyTo($verifier->email, $verifier->name);                    $message->to($user->email)->subject($subject);                });            }        }        /**        * Function send email on contact us screen to project owner        * @request Project_id        * @request subject        * @request message        */        public function contactUsNotification()        {            $projectId = request("project_id");            $subject = request("subject");            $content = request("message");            $project = \App\Models\Project::find($projectId);            if(isset($project->created_by) && $project->created_by>0)            {                $user = \App\Models\User::find($project->created_by);                $verifier = \App\Models\User::find($this->user->id);                $view = 'emails.contactus-notification';                $data['email'] = $user->username;                $data['user'] = $user->name;                $data['verifier'] = $verifier->email;                $data['content'] = $content;                $data['projectName'] = $project->name;                $subject = ' Contact us form - '.$project->name.' - '.$verifier->name.' - '.$subject;                Mail::send($view, $data, function ($message) use ($user, $verifier, $subject) {                    $message->from($verifier->email, $verifier->name);                    //$message->replyTo($verifier->email, $verifier->name);                    $message->to($user->email)->subject($subject);                });            }            return $this->success();        }}