<?php/* * This file is part of the IdeaToLife package. * * (c) Youssef Jradeh <youssef.jradeh@ideatolife.me> * */namespace App\Http\Controllers\App\Project;use App\Http\Controllers\WhoController;use App\Models\Project;use App\Models\DiseaseDetail;use App\Models\ProjectDetail;use App\Models\SurveillanceReportCounter;use App\Models\ProjectLocationDetail;use App\Models\SurveillanceReportAdditional;use Illuminate\Support\Facades\DB;use Idea\Helpers\Paging;use Illuminate\Support\Facades\Mail;class ProjectController extends WhoController {	public $filePath = "projects/";	/**	 *	 * @return array	 */	protected static function validationRules() {		return [];	}	/**        * return in progress and completed project base on the status.        *        * @return \Illuminate\Http\Response        */	public function all()        {		$projectType = request("project_type", "survey");                $roles = \Idea\Models\Role::pluck("slug","id")->toArray();		$inProgress = Project::with("form")                                    ->where(function ($q) use ($projectType) {                                        if($projectType == 'surveillance')                                            $q->where("project_type", $projectType)->where("status", 1);                                        else                                            $q->where("project_type", $projectType)->where("date_end", ">=", date("Y-m-d H:i:s"));                                    })		                     ->whereHas('members', function ($q) {			                     $q->where('user_id', $this->user->id);		                     })		                     ->orderBy("id")		                     ->get();                // inject user_role  in project                foreach($inProgress as $project)                {                    if(isset($this->user->role_id) && $this->user->role_id == 12){                        $project->user_role = "collector";                        $project->verifier_count = null;                    }                    else{                        $titleId = @\App\Models\ProjectUserTitles::where("project_id", $project->id)->where("user_id", $this->user->id)->first()->title_id;                        $project->user_role = @$roles[(int)@$titleId];                        $projectPermissions = \App\Models\ProjectPermission::where("user_id", $this->user->id)->first();                        $permissionList = [13=>'DL',14=>'LL',15=>'CL',16=>'HL'];                        $userPermission = @$permissionList[$projectPermissions->title_id];                        $query = \DB::select(DB::raw("SELECT COUNT(1) as count "                                                        . " FROM disease_verifications dv"                                                        . " Where dv.project_id='{$project->id}' AND dv.confirmation_level='$userPermission' AND dv.confirmation_status != 'discard' AND dv.confirmation_level IS NOT NULL AND ((dv.confirmation_status = 'pending' AND dv.confirmed_by IS NULL) OR (dv.confirmed_by = '{$this->user->id}' AND dv.confirmation_status != 'completed'))"));                        $project->verifier_count = (int)@$query[0]->count;                    }                }                $completed  = Project::with("form")                                    ->where(function ($q) use ($projectType) {                                        if($projectType == 'surveillance')                                            $q->where("project_type", $projectType)->where("status", 0);                                        else                                            $q->where("project_type", $projectType)->where("date_end", "<", date("Y-m-d H:i:s"));                                    })		                     ->whereHas('members', function ($q) {			                     $q->where('user_id', $this->user->id);		                     })		                     ->orderBy("id")		                     ->get();                // inject user_role  in project                foreach($completed as $project)                {                    if(isset($this->user->role_id) && $this->user->role_id == 12)                        $project->user_role = "collector";                    else{                        $titleId = @\App\Models\ProjectUserTitles::where("project_id", $project->id)->where("user_id", $this->user->id)->first()->title_id;                        $project->user_role = @$roles[(int)@$titleId];                    }                }		return $this->successData([			"in_progress" => $inProgress,			"completed"   => $completed,		]);	}        /**        * Get Project Locations specfied        * @request form_id        * @return \Illuminate\Http\Response        */        public function projectLocations()        {            $form = \App\Models\Form::find(request("form_id"));            $projectId = $form->project_id;            $dataList = \App\Models\Governorate::with("children.children.children")->orderBy("name")->get();            $selectedGovernorates = ProjectLocationDetail::where("user_id",$this->user->id)->where("project_id", $projectId)->orderBy("governorate_id")->pluck("governorate_id", "governorate_id")->toArray();            $selectedDistricts = ProjectLocationDetail::where("user_id",$this->user->id)->where("project_id", $projectId)->pluck("district_id", "district_id")->toArray();            $selectedSites = ProjectLocationDetail::where("user_id",$this->user->id)->where("project_id", $projectId)->pluck("site_id", "site_id")->toArray();            $selectedClusters = ProjectLocationDetail::where("user_id",$this->user->id)->where("project_id", $projectId)->pluck("cluster_id", "cluster_id")->toArray();            $dataList = [];            foreach($selectedGovernorates as $governorateId)            {                $dDataList = [];                $governorate = \App\Models\Governorate::find($governorateId);                if(!$governorate)                    continue;                $gDataList = array('id'=>$governorate->id, 'name'=>$governorate->name);                $governorateDistricts = \App\Models\District::where("governorate_id", $governorate->id)->pluck("id","id")->toArray();                foreach($selectedDistricts as $districtId)                {                    if(in_array($districtId, $governorateDistricts))                    {                        $sDataList = [];                        $district = \App\Models\District::find($districtId);                        $dNewDataList = array('id'=>$district->id, 'name'=>$district->name, 'governorate_id'=>$district->governorate_id);                        $districtSites = \App\Models\SiteReference::where("district_id", $districtId)->pluck("id","id")->toArray();                        foreach($selectedSites as $siteId)                        {                            if(in_array($siteId, $districtSites))                            {                                $cDataList = [];                                $site = \App\Models\SiteReference::find($siteId);                                $sNewDataList = array('id'=>$site->id, 'name'=>$site->name, 'governorate_id'=>$site->governorate_id, 'district_id'=>$site->district_id);                                $siteClusters = \App\Models\ClusterReference::where("site_id", $siteId)->pluck("id","id")->toArray();                                foreach($selectedClusters as $clusterId)                                {                                    if(in_array($clusterId, $siteClusters))                                    {                                        $cluster = \App\Models\ClusterReference::find($clusterId);                                        $cDataList[] = array('id'=>$cluster->id, 'name'=>$cluster->name, 'site_id'=>$cluster->site_id);                                    }                                }                                $sDataList[] = $sNewDataList + array('children'=>$cDataList);                            }                        }                        $dDataList[] = $dNewDataList + array('children'=>$sDataList);                    }                }                $dataList[] = $gDataList + array('children'=>$dDataList);            }            return $this->successData($dataList);        }        /**        * Get List of Verifications        * @request query        * @request date        * @request status        * @request project_id        * @request page        *        * @return \Illuminate\Http\Response        */        public function verificationDataList()        {            $search = request("query");            $date = request("date");            $status = strtolower(request("status"));            $projectId = (int)@request("project_id");            $currentPage = request('page', 1);            $subQuery = "";            if(!empty($date)){                $date = date("Y-m-d", strtotime($date));                $subQuery .= " AND dv.created_at LIKE '{$date}%' ";            }            if(!empty($search))                $subQuery .= " AND dv.disease_id IN (SELECT id from disease_bank where appearance_name_en LIKE '%$search%') ";            if(!empty($status))                $subQuery .= " AND dv.confirmation_status LIKE '{$status}' ";            $projectPermissions = \App\Models\ProjectPermission::where("user_id", $this->user->id)->first();            //get verifications disease data            $permissionList = [13=>'DL',14=>'LL',15=>'CL',16=>'HL'];            $userPermission = @$permissionList[$projectPermissions->title_id];            $query = \DB::select(DB::raw("SELECT (SELECT name from projects where id=dv.project_id) as project_name, "                                            . " (SELECT name from users where id=dv.user_id) as collector, "                                            . " (SELECT TIMESTAMPDIFF(HOUR,NOW(),dv.date_end)) as hours, "                                            . " (SELECT appearance_name_en from disease_bank where id=dv.disease_id) as disease_name, "                                            . " (SELECT disease_color from disease_bank where id=dv.disease_id) as disease_color, "                                            . " dv.surveillance_form_instance_id, dv.project_id, dv.disease_id, dv.date_start, dv.date_end, dv.created_at, dv.confirmation_status "                                            . " FROM disease_verifications dv"                                            . " Where dv.project_id='$projectId' AND dv.confirmation_level='$userPermission' AND dv.confirmation_status != 'discard' AND dv.confirmation_level IS NOT NULL AND ((dv.confirmation_status = 'pending' AND dv.confirmed_by IS NULL) OR (dv.confirmed_by = '{$this->user->id}' AND dv.confirmation_status != 'completed')) $subQuery GROUP BY dv.project_id, dv.surveillance_form_instance_id Order By dv.surveillance_form_instance_id DESC"));            $listingData = collect($query);            $collection = $this->paginateCollection($listingData, 10);            $collection = json_decode(json_encode($collection), true);            $itemList = array();            if(isset($collection['data']) && count($collection['data'])>0){                foreach($collection['data'] as $key => $item){                    array_push($itemList, $item);                }            }            $dataList = array('items'=>$itemList, 'current_page'=>$collection['current_page'], 'from'=>$collection['from'], 'last_page'=>$collection['last_page'], 'next_page_url'=>$collection['next_page_url'], 'path'=>$collection['path'], 'per_page'=>$collection['per_page'], 'prev_page_url'=>$collection['prev_page_url'], 'to'=>$collection['to'], 'total'=>$collection['total']);            return $this->successData($dataList);        }        /**        * Get List of user Collections        * @request query        * @request status        * @request date        *        * @return \Illuminate\Http\Response        */        public function userCollectionList()        {            $search = request("query");            $status = strtolower(request("status"));            $date = request("date");            $date = ($date != "" && $date != "null" && $date != null)?date("Y-m-d", strtotime($date)):"";            $subQuery = "";            if(!empty($date))                $subQuery .= " AND sfi.created_at LIKE '{$date}%' ";            if(!empty($search))                $subQuery .= " AND sfi.project_id IN (SELECT id from projects where name LIKE '%$search%') ";            if(!empty($status))                $subQuery .= " AND sfi.instance_status LIKE '{$status}' ";            //get surveillance form instances of user            $query = \DB::select(DB::raw("SELECT (SELECT name from projects where id=sfi.project_id) as project_name, "                                            . " (SELECT appearance_name_en from disease_bank where id=sfi.disease_id) as disease_name, "                                            . " sfi.id as instance_id, sfi.project_id, sfi.instance_status, "                                            . " IF(sfi.instance_status != 'submitted', '-', sfi.created_at) as created_at"                                            . " FROM surveillance_form_instances sfi "                                            . " Where sfi.deleted_at IS NULL AND sfi.user_id='{$this->user->id}' $subQuery Order By sfi.id DESC"));            $listingData = collect($query);            $collection = $this->paginateCollection($listingData, 10);            $collection = json_decode(json_encode($collection), true);            $itemList = array();            if(isset($collection['data']) && count($collection['data'])>0){                foreach($collection['data'] as $key => $item){                    array_push($itemList, $item);                }            }            $dataList = array('items'=>$itemList, 'current_page'=>$collection['current_page'], 'from'=>$collection['from'], 'last_page'=>$collection['last_page'], 'next_page_url'=>$collection['next_page_url'], 'path'=>$collection['path'], 'per_page'=>$collection['per_page'], 'prev_page_url'=>$collection['prev_page_url'], 'to'=>$collection['to'], 'total'=>$collection['total']);            return $this->successData($dataList);        }        /**        * Get immediate Collections Data        * @request project_id        *        * @return \Illuminate\Http\Response        */        public function immediateCollectionList($export=0,$excelprojectId=0)        {            $date = date("Y-m-d");            $projectId = ($excelprojectId>0)?$excelprojectId:(int)@request("project_id");            if($projectId == 0)                return $this->failed("Invalid project id!");            $reportAdditional = SurveillanceReportAdditional::where("project_id",$projectId)                                                            ->where("user_id",$this->user->id)                                                            ->where("report_type", "daily")                                                            ->whereBetween('created_at', [$date." 00:00:00", $date." 23:59:59"])                                                            ->pluck("additional")->first();            $form = \App\Models\Form::where("project_id", $projectId)->first();            $diseaseAll = DiseaseDetail::where("project_id", $projectId)->pluck("disease_id","disease_id")->toArray();            $collectedDiseases = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("instance_type","collection")->where('created_at', "LIKE", $date."%")->pluck("disease_id", "disease_id")->toArray();            $categoryIds = \App\Models\DiseaseBank::whereIn("id",$diseaseAll)->pluck("disease_category_id","disease_category_id")->toArray();            $categories = \App\Models\DiseaseCategory::whereIn("id", $categoryIds)->get();            $itemList = [];            $totalMaleBelow5 = 0;            $totalMaleAbove5 = 0;            $totalFemaleBelow5 = 0;            $totalFemaleAbove5 = 0;            foreach($categories as $category)            {                $categoryDiseases = \App\Models\DiseaseBank::where("disease_category_id","!=",$category->id)->pluck("id","id")->toArray();                $categoryDiseases = array_diff($diseaseAll, $categoryDiseases);                $diseaseCountList = [];                foreach($categoryDiseases as $diseaseId)                {                    $maleAgeBelow5 = 0;                    $maleAgeAbove5 = 0;                    $femaleAgeBelow5 = 0;                    $femaleAgeAbove5 = 0;                    $disease = \App\Models\DiseaseBank::find($diseaseId);                    $userInstances = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("disease_id", $diseaseId)->where("instance_type","collection")->where('created_at', "LIKE", $date."%")->orderBy("project_id")->get();                    foreach($userInstances as $instance){                        $form = \App\Models\Form::where("project_id",$instance->project_id)->first();                        $formQuestion1 = \App\Models\Question::with("options")->where("form_id",$form->id)->where("name_en","LIKE","Gender?")->where("response_type_id",1)->first();                        $formQuestion2 = \App\Models\Question::where("form_id",$form->id)->where("name_en","LIKE","Age?")->where("response_type_id",4)->first();                        $maleOptionId = 0;                        $femaleOptionId = 0;                        if(isset($formQuestion1->options)){                            foreach($formQuestion1->options as $option){                                if($option->name_en == 'Female')                                    $femaleOptionId = $option->id;                                else                                    $maleOptionId = $option->id;                            }                        }                        $malCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$maleOptionId)->count():0;                        $femaleCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$femaleOptionId)->count():0;                        $age = (int)@\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion2->id)->pluck("value")->first();                        if($femaleCount > 0 && $age <= 5)                            $femaleAgeBelow5 ++;                        else if($femaleCount > 0 && $age > 5)                            $femaleAgeAbove5 ++;                        else if($malCount > 0 && $age <= 5)                            $maleAgeBelow5 ++;                        else                            $maleAgeAbove5 ++;                    }                    $maleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("report_type","daily")->where("user_id",$this->user->id)->whereBetween('created_at', [$date." 00:00:00", $date." 23:59:59"])->where("disease_id",$diseaseId)->where("gender","Male")->where("age",4)->pluck("number")->first();                    $maleAgeAbove5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("report_type","daily")->where("user_id",$this->user->id)->whereBetween('created_at', [$date." 00:00:00", $date." 23:59:59"])->where("disease_id",$diseaseId)->where("gender","Male")->where("age",6)->pluck("number")->first();                    $femaleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("report_type","daily")->where("user_id",$this->user->id)->whereBetween('created_at', [$date." 00:00:00", $date." 23:59:59"])->where("disease_id",$diseaseId)->where("gender","Female")->where("age",4)->pluck("number")->first();                    $femaleAgeAbove5 = (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("report_type","daily")->where("user_id",$this->user->id)->whereBetween('created_at', [$date." 00:00:00", $date." 23:59:59"])->where("disease_id",$diseaseId)->where("gender","Female")->where("age",6)->pluck("number")->first();                    $totalMaleBelow5 += $maleAgeBelow5;                    $totalMaleAbove5 += $maleAgeAbove5;                    $totalFemaleBelow5 += $femaleAgeBelow5;                    $totalFemaleAbove5 += $femaleAgeAbove5;                    $diseaseCountList[] = ['disease_id'=>$diseaseId,'disease_en'=>$disease->appearance_name_en,'disease_ar'=>$disease->appearance_name_ar,'disease_color'=>$disease->disease_color,'female_below5'=>$femaleAgeBelow5,'female_above5'=>$femaleAgeAbove5,'male_below5'=>$maleAgeBelow5,'male_above5'=>$maleAgeAbove5];                }                $itemList[] = ['category_en'=>$category->category_en,'category_ar'=>$category->category_ar,'items'=>$diseaseCountList];            }            $totalItems = ['total_female_below5'=>$totalFemaleBelow5,'total_male_below5'=>$totalMaleBelow5,'total_female_above5'=>$totalFemaleAbove5,'total_male_above5'=>$totalMaleAbove5,'additional'=>(int)@$reportAdditional,'records'=>$itemList];            if($export)                return $totalItems;            else                return $this->successData($totalItems);        }        /**        * Export immediate Collections Data        * @request project_id        *        * @return excel file        */        public function exportDailyCollections()        {            $projectId = (int)@request("project_id");            if($projectId == 0)                return $this->failed("Incorrect Project Id.");            $dataItems = $this->immediateCollectionList(1,$projectId);            $additionalValue = (int)@$dataItems["additional"];            $western_arabic = array('0','1','2','3','4','5','6','7','8','9');            $eastern_arabic = array('٠','١','٢','٣','٤','٥','٦','٧','٨','٩');            $diseaseColors = [];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            foreach($dataItems['records'] as $data){               $excelData[] = [0=>'',1=>'',2=>'',3=>($data['category_en']."/ ".$data['category_ar']),4=>'',5=>'',6=>'',7=>''];               $counter = 1;               foreach($data['items'] as $item){                   $diseaseColors["{$item['disease_en']}"] = $item['disease_color'];                   $excelData[] = [0=>'',1=>($counter),2=>$item['disease_en'],3=>$item['male_below5'],4=>$item['female_below5'],5=>$item['male_above5'],6=>$item['female_above5'],7=>$item['disease_ar'],8=>str_replace($western_arabic, $eastern_arabic, $counter++)];               }            }            $sumValues = $dataItems['total_male_below5'] + $dataItems['total_female_below5'] + $dataItems['total_male_above5'] + $dataItems['total_female_above5'] + $additionalValue;            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'Total Number of All Consultation',3=>$dataItems['total_male_below5'],4=>$dataItems['total_female_below5'],5=>$dataItems['total_male_above5'],6=>$dataItems['total_female_above5'],7=>'عدد المراجعين الكلى'];            $excelData[] = [0=>'',1=>'',2=>'Additional consultation',3=>'',4=>$additionalValue,5=>'',6=>'',7=>'عدد المراجعات الاخرى'];            $excelData[] = [0=>'',1=>'',2=>'Total',3=>'',4=>$sumValues,5=>'',6=>'',7=>'مجموع الكلي'];            \Excel::load(public_path()."/template/collector-report.xls", function ($excel) use ($excelData,$diseaseColors)            {                // creating the sheet and filling it with questions data                    $excel->sheet(//black, red, orange , green , blue                        'Collections', function ($sheet) use ($excelData,$diseaseColors) {                            //$sheet->rows($excelData);                            $colorList = ['red'=>'FF0000', 'blue'=>'0000FF', 'orange'=>'FFA500', 'green'=>'008000', 'black'=>'000000'];                            for($i = 1 ; $i <= count($excelData); $i++)                            {                                if($i < 4)                                    continue;                                $data = @$excelData[$i];                                $color = @$diseaseColors[@$data[2]];                                $color = ($color != ""?$colorList[$color]:"000000");                                $sheet->cells('A'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[0]);                                });                                $sheet->cells('B'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[1]);                                });                                $sheet->cells('C'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[2]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('D'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[3]);                                });                                $sheet->cells('E'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[4]);                                });                                $sheet->cells('F'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[5]);                                });                                $sheet->cells('G'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[6]);                                });                                $sheet->cells('H'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[7]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('I'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[8]);                                });                            }                        }                    );            })->store('xls', "/tmp");            //download excel file            $file = "/tmp/collector-report.xls";            return response()->download($file, "collector-report.xls", ['Content-Type: application/vnd.ms-excel']);        }        /**        * Get weekly Collections Data        * @request project_id        *        * @return \Illuminate\Http\Response        */        public function weeklyCollectionList($export=0,$excelprojectId=0)        {            $dateStart = date('Y-m-d 00:00:00', strtotime("this week"));            $dateEnd = date("Y-m-d H:i:s");            $projectId = ($excelprojectId>0)?$excelprojectId:(int)@request("project_id");            if($projectId == 0)                return $this->failed("Invalid project id!");            $reportAdditional = SurveillanceReportAdditional::where("project_id",$projectId)                                                            ->where("user_id",$this->user->id)                                                            ->whereBetween('created_at', [$dateStart, $dateEnd])                                                            ->sum("additional");            $form = \App\Models\Form::where("project_id", $projectId)->first();            $diseaseAll = DiseaseDetail::where("project_id", $projectId)->pluck("disease_id","disease_id")->toArray();            $collectedDiseases = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("instance_type","collection")->whereBetween('created_at', [$dateStart, $dateEnd])->pluck("disease_id", "disease_id")->toArray();            $categoryIds = \App\Models\DiseaseBank::whereIn("id",$diseaseAll)->pluck("disease_category_id","disease_category_id")->toArray();            $categories = \App\Models\DiseaseCategory::whereIn("id", $categoryIds)->get();            $itemList = [];            $totalMaleBelow5 = 0;            $totalMaleAbove5 = 0;            $totalFemaleBelow5 = 0;            $totalFemaleAbove5 = 0;            foreach($categories as $category)            {                $categoryDiseases = \App\Models\DiseaseBank::where("disease_category_id","!=",$category->id)->pluck("id","id")->toArray();                $categoryDiseases = array_diff($diseaseAll, $categoryDiseases);                $diseaseCountList = [];                foreach($categoryDiseases as $diseaseId)                {                    $maleAgeBelow5 = 0;                    $maleAgeAbove5 = 0;                    $femaleAgeBelow5 = 0;                    $femaleAgeAbove5 = 0;                    $disease = \App\Models\DiseaseBank::find($diseaseId);                    $userInstances = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("disease_id", $diseaseId)->where("instance_type","collection")->whereBetween('created_at', [$dateStart, $dateEnd])->orderBy("project_id")->get();                    foreach($userInstances as $instance){                        $form = \App\Models\Form::where("project_id",$instance->project_id)->first();                        $formQuestion1 = \App\Models\Question::with("options")->where("form_id",$form->id)->where("name_en","LIKE","Gender?")->where("response_type_id",1)->first();                        $formQuestion2 = \App\Models\Question::where("form_id",$form->id)->where("name_en","LIKE","Age?")->where("response_type_id",4)->first();                        $maleOptionId = 0;                        $femaleOptionId = 0;                        if(isset($formQuestion1->options)){                            foreach($formQuestion1->options as $option){                                if($option->name_en == 'Female')                                    $femaleOptionId = $option->id;                                else                                    $maleOptionId = $option->id;                            }                        }                        $malCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$maleOptionId)->count():0;                        $femaleCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$femaleOptionId)->count():0;                        $age = (int)@\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion2->id)->pluck("value")->first();                        if($femaleCount > 0 && $age <= 5)                            $femaleAgeBelow5 ++;                        else if($femaleCount > 0 && $age > 5)                            $femaleAgeAbove5 ++;                        else if($malCount > 0 && $age <= 5)                            $maleAgeBelow5 ++;                        else                            $maleAgeAbove5 ++;                    }                    $maleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Male")->where("age",4)->sum("number");                    $maleAgeAbove5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Male")->where("age",6)->sum("number");                    $femaleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Female")->where("age",4)->sum("number");                    $femaleAgeAbove5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Female")->where("age",6)->sum("number");                    $totalMaleBelow5 += $maleAgeBelow5;                    $totalMaleAbove5 += $maleAgeAbove5;                    $totalFemaleBelow5 += $femaleAgeBelow5;                    $totalFemaleAbove5 += $femaleAgeAbove5;                    $diseaseCountList[] = ['disease_id'=>$diseaseId,'disease_en'=>$disease->appearance_name_en,'disease_ar'=>$disease->appearance_name_ar,'disease_color'=>$disease->disease_color,'female_below5'=>$femaleAgeBelow5,'female_above5'=>$femaleAgeAbove5,'male_below5'=>$maleAgeBelow5,'male_above5'=>$maleAgeAbove5];                }                $itemList[] = ['category_en'=>$category->category_en,'category_ar'=>$category->category_ar,'items'=>$diseaseCountList];            }            $totalItems = ['total_female_below5'=>$totalFemaleBelow5,'total_male_below5'=>$totalMaleBelow5,'total_female_above5'=>$totalFemaleAbove5,'total_male_above5'=>$totalMaleAbove5,'additional'=>(int)@$reportAdditional,'records'=>$itemList];            if($export)                return $totalItems;            else                return $this->successData($totalItems);        }        /**        * Get weekly Collections Data        * @request project_id        *        * @return excel file        */        public function exportWeeklyCollections()        {            $projectId = (int)@request("project_id");            if($projectId == 0)                return $this->failed("Incorrect Project Id.");            $dataItems = $this->weeklyCollectionList(1,$projectId);            $additionalValue = (int)@$dataItems["additional"];            $western_arabic = array('0','1','2','3','4','5','6','7','8','9');            $eastern_arabic = array('٠','١','٢','٣','٤','٥','٦','٧','٨','٩');            $diseaseColors = [];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            foreach($dataItems['records'] as $data){               $excelData[] = [0=>'',1=>'',2=>'',3=>($data['category_en']."/ ".$data['category_ar']),4=>'',5=>'',6=>'',7=>''];               $counter = 1;               foreach($data['items'] as $item){                   $diseaseColors["{$item['disease_en']}"] = $item['disease_color'];                   $excelData[] = [0=>'',1=>($counter),2=>$item['disease_en'],3=>$item['male_below5'],4=>$item['female_below5'],5=>$item['male_above5'],6=>$item['female_above5'],7=>$item['disease_ar'],8=>str_replace($western_arabic, $eastern_arabic, $counter++)];               }            }            $sumValues = $dataItems['total_male_below5'] + $dataItems['total_female_below5'] + $dataItems['total_male_above5'] + $dataItems['total_female_above5'] + $additionalValue;            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'Total Number of All Consultation',3=>$dataItems['total_male_below5'],4=>$dataItems['total_female_below5'],5=>$dataItems['total_male_above5'],6=>$dataItems['total_female_above5'],7=>'عدد المراجعين الكلى'];            $excelData[] = [0=>'',1=>'',2=>'Additional consultation',3=>'',4=>$additionalValue,5=>'',6=>'',7=>'عدد المراجعات الاخرى'];            $excelData[] = [0=>'',1=>'',2=>'Total',3=>'',4=>$sumValues,5=>'',6=>'',7=>'مجموع الكلي'];            \Excel::load(public_path()."/template/collector-report.xls", function ($excel) use ($excelData,$diseaseColors)            {                // creating the sheet and filling it with questions data                    $excel->sheet(//black, red, orange , green , blue                        'Collections', function ($sheet) use ($excelData,$diseaseColors) {                            //$sheet->rows($excelData);                            $colorList = ['red'=>'FF0000', 'blue'=>'0000FF', 'orange'=>'FFA500', 'green'=>'008000', 'black'=>'000000'];                            for($i = 1 ; $i <= count($excelData); $i++)                            {                                if($i < 4)                                    continue;                                $data = @$excelData[$i];                                $color = @$diseaseColors[@$data[2]];                                $color = ($color != ""?$colorList[$color]:"000000");                                $sheet->cells('A'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[0]);                                });                                $sheet->cells('B'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[1]);                                });                                $sheet->cells('C'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[2]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('D'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[3]);                                });                                $sheet->cells('E'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[4]);                                });                                $sheet->cells('F'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[5]);                                });                                $sheet->cells('G'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[6]);                                });                                $sheet->cells('H'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[7]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('I'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[8]);                                });                            }                        }                    );            })->store('xls', "/tmp");            //download excel file            $file = "/tmp/collector-report.xls";            return response()->download($file, "collector-report.xls", ['Content-Type: application/vnd.ms-excel']);        }        /**        * Get monthly Collections Data        * @request project_id        *        * @return excel file        */        public function exportMonthlyCollections()        {            $projectId = (int)@request("project_id");            if($projectId == 0)                return $this->failed("Incorrect Project Id.");            $dataItems = $this->monthlyCollectionList(1,$projectId);            $additionalValue = (int)@$dataItems["additional"];            $western_arabic = array('0','1','2','3','4','5','6','7','8','9');            $eastern_arabic = array('٠','١','٢','٣','٤','٥','٦','٧','٨','٩');            $diseaseColors = [];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            foreach($dataItems['records'] as $data){               $excelData[] = [0=>'',1=>'',2=>'',3=>($data['category_en']."/ ".$data['category_ar']),4=>'',5=>'',6=>'',7=>''];               $counter = 1;               foreach($data['items'] as $item){                   $diseaseColors["{$item['disease_en']}"] = $item['disease_color'];                   $excelData[] = [0=>'',1=>($counter),2=>$item['disease_en'],3=>$item['male_below5'],4=>$item['female_below5'],5=>$item['male_above5'],6=>$item['female_above5'],7=>$item['disease_ar'],8=>str_replace($western_arabic, $eastern_arabic, $counter++)];               }            }            $sumValues = $dataItems['total_male_below5'] + $dataItems['total_female_below5'] + $dataItems['total_male_above5'] + $dataItems['total_female_above5'] + $additionalValue;            $excelData[] = [0=>'',1=>'',2=>'',3=>'',4=>'',5=>'',6=>'',7=>''];            $excelData[] = [0=>'',1=>'',2=>'Total Number of All Consultation',3=>$dataItems['total_male_below5'],4=>$dataItems['total_female_below5'],5=>$dataItems['total_male_above5'],6=>$dataItems['total_female_above5'],7=>'عدد المراجعين الكلى'];            $excelData[] = [0=>'',1=>'',2=>'Additional Consultation',3=>'',4=>$additionalValue,5=>'',6=>'',7=>'عدد المراجعات الاخرى'];            $excelData[] = [0=>'',1=>'',2=>'Total',3=>'',4=>$sumValues,5=>'',6=>'',7=>'مجموع الكلي'];            \Excel::load(public_path()."/template/collector-report.xls", function ($excel) use ($excelData,$diseaseColors)            {                // creating the sheet and filling it with questions data                    $excel->sheet(//black, red, orange , green , blue                        'Collections', function ($sheet) use ($excelData,$diseaseColors) {                            //$sheet->rows($excelData);                            $colorList = ['red'=>'FF0000', 'blue'=>'0000FF', 'orange'=>'FFA500', 'green'=>'008000', 'black'=>'000000'];                            for($i = 1 ; $i <= count($excelData); $i++)                            {                                if($i < 4)                                    continue;                                $data = @$excelData[$i];                                $color = @$diseaseColors[@$data[2]];                                $color = ($color != ""?$colorList[$color]:"000000");                                $sheet->cells('A'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[0]);                                });                                $sheet->cells('B'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[1]);                                });                                $sheet->cells('C'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[2]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('D'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[3]);                                });                                $sheet->cells('E'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[4]);                                });                                $sheet->cells('F'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[5]);                                });                                $sheet->cells('G'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[6]);                                });                                $sheet->cells('H'.$i, function($cells) use ($data, $color) {                                    $cells->setValue(@$data[7]);                                    $cells->setFontColor("{$color}");                                });                                $sheet->cells('I'.$i, function($cells) use ($data) {                                    $cells->setValue(@$data[8]);                                });                            }                        }                    );            })->store('xls', "/tmp");            //download excel file            $file = "/tmp/collector-report.xls";            return response()->download($file, "collector-report.xls", ['Content-Type: application/vnd.ms-excel']);        }       /**        * Get monthly Collections Data        * @request project_id        *        * @return \Illuminate\Http\Response        */        public function monthlyCollectionList($export=0,$excelProjectId=0)        {            $dateStart = date("Y-m-01 00:00:00");            $dateEnd = date("Y-m-d H:i:s");            $projectId = ($excelProjectId>0)?$excelProjectId:(int)@request("project_id");            if($projectId == 0)                return $this->failed("Invalid project id!");            $reportAdditional = SurveillanceReportAdditional::where("project_id",$projectId)                                                            ->where("user_id",$this->user->id)                                                            ->whereBetween('created_at', [$dateStart, $dateEnd])                                                            ->sum("additional");            $form = \App\Models\Form::where("project_id", $projectId)->first();            $diseaseAll = DiseaseDetail::where("project_id", $projectId)->pluck("disease_id","disease_id")->toArray();            $collectedDiseases = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("instance_type","collection")->whereBetween('created_at', [$dateStart, $dateEnd])->pluck("disease_id", "disease_id")->toArray();            $categoryIds = \App\Models\DiseaseBank::whereIn("id",$diseaseAll)->pluck("disease_category_id","disease_category_id")->toArray();            $categories = \App\Models\DiseaseCategory::whereIn("id", $categoryIds)->get();            $itemList = [];            $totalMaleBelow5 = 0;            $totalMaleAbove5 = 0;            $totalFemaleBelow5 = 0;            $totalFemaleAbove5 = 0;            foreach($categories as $category)            {                $categoryDiseases = \App\Models\DiseaseBank::where("disease_category_id","!=",$category->id)->pluck("id","id")->toArray();                $categoryDiseases = array_diff($diseaseAll, $categoryDiseases);                $diseaseCountList = [];                foreach($categoryDiseases as $diseaseId)                {                    $maleAgeBelow5 = 0;                    $maleAgeAbove5 = 0;                    $femaleAgeBelow5 = 0;                    $femaleAgeAbove5 = 0;                    $disease = \App\Models\DiseaseBank::find($diseaseId);                    $userInstances = \App\Models\SurveillanceFormInstance::where("project_id",$projectId)->where("user_id", $this->user->id)->where("disease_id", $diseaseId)->where("instance_type","collection")->whereBetween('created_at', [$dateStart, $dateEnd])->orderBy("project_id")->get();                    foreach($userInstances as $instance){                        $form = \App\Models\Form::where("project_id",$instance->project_id)->first();                        $formQuestion1 = \App\Models\Question::with("options")->where("form_id",$form->id)->where("name_en","LIKE","Gender?")->where("response_type_id",1)->first();                        $formQuestion2 = \App\Models\Question::where("form_id",$form->id)->where("name_en","LIKE","Age?")->where("response_type_id",4)->first();                        $maleOptionId = 0;                        $femaleOptionId = 0;                        if(isset($formQuestion1->options)){                            foreach($formQuestion1->options as $option){                                if($option->name_en == 'Female')                                    $femaleOptionId = $option->id;                                else                                    $maleOptionId = $option->id;                            }                        }                        $malCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$maleOptionId)->count():0;                        $femaleCount = isset($formQuestion1->id)?\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion1->id)->where("value",$femaleOptionId)->count():0;                        $age = (int)@\App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id",$instance->id)->where("question_id",$formQuestion2->id)->pluck("value")->first();                        if($femaleCount > 0 && $age <= 5)                            $femaleAgeBelow5 ++;                        else if($femaleCount > 0 && $age > 5)                            $femaleAgeAbove5 ++;                        else if($malCount > 0 && $age <= 5)                            $maleAgeBelow5 ++;                        else                            $maleAgeAbove5 ++;                    }                    $maleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Male")->where("age",4)->sum("number");                    $maleAgeAbove5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Male")->where("age",6)->sum("number");                    $femaleAgeBelow5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Female")->where("age",4)->sum("number");                    $femaleAgeAbove5 += (int)@SurveillanceReportCounter::where("project_id",$projectId)->where("user_id",$this->user->id)->where("disease_id",$diseaseId)->whereBetween('created_at', [$dateStart, $dateEnd])->where("gender","Female")->where("age",6)->sum("number");                    $totalMaleBelow5 += $maleAgeBelow5;                    $totalMaleAbove5 += $maleAgeAbove5;                    $totalFemaleBelow5 += $femaleAgeBelow5;                    $totalFemaleAbove5 += $femaleAgeAbove5;                    $diseaseCountList[] = ['disease_id'=>$diseaseId,'disease_en'=>$disease->appearance_name_en,'disease_ar'=>$disease->appearance_name_ar,'disease_color'=>$disease->disease_color,'female_below5'=>$femaleAgeBelow5,'female_above5'=>$femaleAgeAbove5,'male_below5'=>$maleAgeBelow5,'male_above5'=>$maleAgeAbove5];                }                $itemList[] = ['category_en'=>$category->category_en,'category_ar'=>$category->category_ar,'items'=>$diseaseCountList];            }            $totalItems = ['total_female_below5'=>$totalFemaleBelow5,'total_male_below5'=>$totalMaleBelow5,'total_female_above5'=>$totalFemaleAbove5,'total_male_above5'=>$totalMaleAbove5,'additional'=>(int)@$reportAdditional,'records'=>$itemList];            if($export)                return $totalItems;            else                return $this->successData($totalItems);        }        /**        * Get User feedback Listing        * @request query        * @request status        * @request date        *        * @return \Illuminate\Http\Response        */        public function userFeedBackList()        {            $search = request("query");            $status = strtolower(request("status"));            $date = request("date");            $date = ($date != "" && $date != "null" && $date != null)?date("Y-m-d", strtotime($date)):"";            $subQuery = "";            if(!empty($date))                $subQuery .= " AND dv.created_at LIKE '{$date}%' ";            if(!empty($search))                $subQuery .= " AND dv.disease_id IN (SELECT id from disease_bank where appearance_name_en LIKE '%$search%') ";            if(!empty($status)){                if(in_array($status, ['discard','completed']))                    $subQuery .= " AND dv.confirmation_status LIKE '{$status}' ";                else                    $subQuery .= " AND dv.confirmation_status != 'discard' AND dv.confirmation_status != 'completed' ";            }            $query = \DB::select(DB::raw("SELECT (SELECT name from projects where id=dv.project_id) as project_name, WEEK(DATE(dv.created_at),1) as week_no,"                                            . " (SELECT appearance_name_en from disease_bank where id=dv.disease_id) as disease_name, "                                            . " sfi.id as instance_id, sfi.created_at, dv.confirmation_level, "                                            . " IF(dv.confirmation_status != 'discard' && dv.confirmation_status != 'completed', 'in-progress',dv.confirmation_status) as instance_status "                                            . " FROM disease_verifications dv, surveillance_form_instances sfi "                                            . " Where dv.id IN (SELECT MAX(id) FROM disease_verifications where confirmation_status IS NOT NULL AND user_id='{$this->user->id}' $subQuery group By surveillance_form_instance_id) "                                            . " AND dv.surveillance_form_instance_id=sfi.id AND sfi.deleted_at IS NULL AND sfi.user_id='{$this->user->id}' $subQuery Order By sfi.id DESC"));        //Group By dv.surveillance_form_instance_id            $listingData = collect($query);            $collection = $this->paginateCollection($listingData, 10);            $collection = json_decode(json_encode($collection), true);            $itemList = array();            if(isset($collection['data']) && count($collection['data'])>0){                foreach($collection['data'] as $key => $item){                    array_push($itemList, $item);                }            }            $dataList = array('items'=>$itemList, 'current_page'=>$collection['current_page'], 'from'=>$collection['from'], 'last_page'=>$collection['last_page'], 'next_page_url'=>$collection['next_page_url'], 'path'=>$collection['path'], 'per_page'=>$collection['per_page'], 'prev_page_url'=>$collection['prev_page_url'], 'to'=>$collection['to'], 'total'=>$collection['total']);            return $this->successData($dataList);        }        /**        * Save the specified resource in storage.        *        * @request project_id        * @request disease_id        * @request report_type        * @request gender        * @request age        *        * @return \Illuminate\Http\Response        */        public function saveReportCounter()        {            $projectId = request("project_id");            $diseaseId = request("disease_id");            $reportType = request("report_type",'weekly');            $gender = request("gender");            $age = request("age");            if($reportType == 'daily')                $dateStart = date("Y-m-d 00:00:00");            else                $dateStart = date('Y-m-d 00:00:00', strtotime("this week"));            $dateEnd = date("Y-m-d H:i:s");            if($diseaseId == 0)                return $this->failed("Invalid disease id!");            $reportCounterObj = SurveillanceReportCounter::where("project_id",$projectId)                                ->whereBetween('created_at', [$dateStart, $dateEnd])                                ->where("report_type",$reportType)                                ->where("user_id",$this->user->id)                                ->where("disease_id",$diseaseId)                                ->where("gender",$gender)                                ->where("age",$age)->first();            $reportCounter = ($reportCounterObj)?$reportCounterObj:new SurveillanceReportCounter();            $reportCounter->disease_id = (int)@request("disease_id");            $reportCounter->user_id = $this->user->id;            $reportCounter->project_id = $projectId;            $reportCounter->age = (int)@request("age");            $reportCounter->report_type = $reportType;            $reportCounter->number = ($reportCounterObj)?((int)@request("number")+$reportCounterObj->number):(int)@request("number");            $reportCounter->gender = request("gender");            $reportCounter->save();            $disease = \App\Models\DiseaseBank::find($diseaseId);            $this->sendAdditionalsNotification($disease->appearance_name_en, $projectId, request("number"));            return $this->successData();        }        /**        * Save the specified resource in storage.        *        * @request project_id        * @request additional        * @request report_type        *        * @return \Illuminate\Http\Response        */        public function saveReportAdditional()        {            $projectId = request("project_id",0);            $additional = request("additional");            $reportType = request("report_type",'weekly');            if($projectId == 0)                return $this->failed("Invalid project id!");            if($reportType == 'daily')                $dateStart = date("Y-m-d 00:00:00");            else                $dateStart = date('Y-m-d 00:00:00', strtotime("this week"));            $dateEnd = date("Y-m-d H:i:s");            $reportAdditionalObj = SurveillanceReportAdditional::where("project_id",$projectId)                                                            ->where("user_id",$this->user->id)                                                            ->where("report_type",$reportType)                                                            ->whereBetween('created_at', [$dateStart, $dateEnd])                                                            ->first();            $reportAdditional = ($reportAdditionalObj)?$reportAdditionalObj:new SurveillanceReportAdditional();            $reportAdditional->user_id = $this->user->id;            $reportAdditional->project_id = $projectId;            $reportAdditional->report_type = $reportType;            $reportAdditional->additional = ($reportAdditionalObj)?($reportAdditionalObj->additional+(int)@request("additional")):(int)@request("additional");            $reportAdditional->save();            if($reportType == 'weekly'){                $totalAdditional = SurveillanceReportAdditional::where("project_id",$projectId)                                                            ->where("user_id",$this->user->id)                                                            ->whereBetween('created_at', [$dateStart, $dateEnd])                                                            ->sum("additional");                $reportAdditional->additional = (int)@$totalAdditional;            }            return $this->successData($reportAdditional);        }        /**        * Remove the specified resource from storage.        *        * @param int $id        *        * @return \Illuminate\Http\Response        */        public function removeCollection($id)        {           try {               if (\App\Models\SurveillanceFormInstance::where('id', $id)->where("instance_status", "submitted")->count() > 0) {                   return $this->failed("Invalid Collection Id/ Can not be deleted!");               }               //then delete the row from the database               \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $id)->delete();               \App\Models\SurveillanceFormInstance::where('id', $id)->where("instance_status","!=","submitted")->delete();               return $this->success('Form Instance deleted.');           } catch (\Exception $e) {               return $this->failed('destroy error');           }        }        /**        * Remove the specified resource from storage.        *        * @param list collections        * @param int $perPage        * @param int $pageName        *        * @return \Illuminate\Http\Response        */        function paginateCollection($collection, $perPage, $pageName = 'page', $fragment = null)        {            $currentPage = \Illuminate\Pagination\LengthAwarePaginator::resolveCurrentPage($pageName);            $currentPageItems = $collection->slice(($currentPage - 1) * $perPage, $perPage);            parse_str(request()->getQueryString(), $query);            unset($query[$pageName]);            $paginator = new \Illuminate\Pagination\LengthAwarePaginator(                $currentPageItems,                $collection->count(),                $perPage,                $currentPage,                [                    'pageName' => $pageName,                    'path' => \Illuminate\Pagination\LengthAwarePaginator::resolveCurrentPath(),                    'query' => $query,                    'fragment' => $fragment                ]            );            return $paginator;        }        /**        * Assign Verification to user        *        * @param instanceId        *        * @return \Illuminate\Http\Response        */        public function assignVerificationData($instanceId=0)        {            $instanceId = ($instanceId>0)?$instanceId:(int)@request("instance_id");            if ($instanceId == 0) {               return $this->failed("Invalid Instance id.");            }            $diseaseInstance = \App\Models\DiseaseVerification::where("surveillance_form_instance_id",$instanceId)->where("confirmation_status", "pending")->whereNull("confirmed_by")->first();            if($diseaseInstance){                $diseaseInstance->confirmation_status = 'in-progress';                $diseaseInstance->date_end = $this->getEndDate($diseaseInstance->date_start, $diseaseInstance->disease_id, $diseaseInstance->confirmation_level);                $diseaseInstance->confirmed_by = $this->user->id;                $diseaseInstance->save();            }            //return $this->successData();        }        /**        * General Function to Get End Date of confirmation Disease        *        * @param startDate        * @param diseaseId        * @param confirmationLevel        *        * @return \Illuminate\Http\Response        */        private function getEndDate($startDate, $diseaseId, $confirmationLevel)        {            $disease = \App\Models\DiseaseBank::find($diseaseId);            if (!$disease) {               return $this->failed("Invalid disease id.");            }            $duration = '1 day - 24 hrs';            $noOfDays = ['1 day - 24 hrs'=>1, '2 days - 48 hrs'=>2, '3 days - 72 hrs'=>3, '7 days - 168 hrs'=>7, '14 days - 336 hrs'=>14, '1 month - 730 hrs'=>30, '2 months - 1460 hrs'=>60, '3 months - 2190 hrs'=>90];            if($confirmationLevel == 'DL')                $duration = $disease->district_confirmation;            else if($confirmationLevel == 'LL')                $duration = $disease->laboratory_confirmation;            else if($confirmationLevel == 'CL')                $duration = $disease->clinical_confirmation;            else if($confirmationLevel == 'HL')                $duration = $disease->higher_confirmation;            $days = (int)@$noOfDays[$duration];            $dateEnd =  date('Y-m-d H:i:s', strtotime($startDate. " + {$days} days"));            return $dateEnd;        }        /**        * Get the project instance data and its details.        * @vars $diseaseId=0,$projectId=0,$instanceId=0        * @return \Illuminate\Http\Response        */        public function getSurveillanceInstanceData()        {                ini_set('memory_limit','-1');                set_time_limit(6000);                $instanceId = (int)@request("instance_id");                $this->assignVerificationData($instanceId);                $userId = ($this->user->id > 0)?$this->user->id:(int)@request("user_id");                $verification = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)->whereIn("confirmation_status", ["in-progress","on-hold","saved"])->where("confirmed_by", $this->user->id)->first();                if (!$verification) {                    return $this->failed("Invalid Verification instance Id.");                }                $diseaseId = $verification->disease_id;                $projectId = $verification->project_id;                $form = \App\Models\Form::where("project_id", $projectId)->first();                $disease = \App\Models\DiseaseBank::where("id", $diseaseId)->first();                if($disease){                    $formCategory = \App\Models\FormCategory::where("form_id", $form->id)->where("name_en", "LIKE", $disease->appearance_name_en)->first();                    if (!$formCategory) {                        return $this->failed("Invalid Form Category");                    }                }else                    return $this->failed("Invalid Disease Id");                $formTypeId = (int)@$formCategory->form_type_id;                $formData = \App\Models\PushToMobile::where("form_id", $form->id)->orderBy("id", "desc")->pluck("response_data")->first();                if (!$formData) {                        return $this->failed("Invalid Project Id");                }else                    $formData = json_decode($formData);                $tempFormData['id'] = $formData->id;                $tempFormData['project_id'] = $formData->project_id;                $tempFormData['is_mobile'] = $formData->is_mobile;                foreach ($formData->types as $type){                    if(in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name'))){                    //if($type->parameter_type == 'collection' && $type->name_en != "Parameter Disease"){                        $type->readOnly = true;                        $type->instanceId = $instanceId;                        $tempFormData['types'][] = $type;                    }                }                $FormTypeData = \App\Models\FormType::find($formTypeId);                $FormTypeData->readOnly = true;                $FormTypeData->instanceId = $instanceId;                $FormTypeData['categories'] = \App\Models\FormCategory::where("id", $formCategory->id)->with(["groups.questions.options","groups.questions.skipLogic.skipLogicDetails","groups.questions.questionSettingOptions","groups.questions.questionSettingAppearance","groups.questions.questionAssignment"])->get();                array_push($tempFormData['types'], $FormTypeData);                foreach ($formData->types as $type){                    if(!in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name')) && ($type->parameter_type == 'collection' && $type->name_en != "Parameter Disease")){                        $type->readOnly = true;                        $type->instanceId = $instanceId;                        $tempFormData['types'][] = $type;                    }                }                //add verifications parameters before the recent one                $verificationPrecedenceList = ['verifier'=>0, 'laboratory'=>1, 'clinic'=>2, 'higher_verification'=>3];                $verificationList = ['DL'=>'verifier', 'LL'=>'laboratory', 'CL'=>'clinic', 'HL'=>'higher_verification'];                $reverseList = ['verifier'=>'DL', 'laboratory'=>'LL', 'clinic'=>'CL', 'higher_verification'=>'HL'];                $diseaseParams = [0=>$disease->district_confirmation,1=>$disease->laboratory_confirmation,2=>$disease->clinical_confirmation,3=>$disease->higher_confirmation];                foreach($verificationPrecedenceList as $level => $precedence){                    if($diseaseParams[$precedence] != "" && $diseaseParams[$precedence] != null)                    {                        $userLevel = @$verificationList[$verification->confirmation_level];                        $currentLevel = (int)@$verificationPrecedenceList[$userLevel];                        if($precedence < $currentLevel){                            $verificationParam = \App\Models\FormType::with(["categories.groups.questions.options","categories.groups.questions.skipLogic.skipLogicDetails","categories.groups.questions.questionSettingOptions","categories.groups.questions.questionSettingAppearance","categories.groups.questions.questionAssignment"])->where("form_id", $form->id)->where("parameter_type", "verification")->where("parameter_level", $level)->first();                            if(isset($verificationParam)){                                $otherInstanceId = \App\Models\DiseaseVerification::where("surveillance_form_instance_id", $instanceId)->where("confirmation_level", @$reverseList[$level])->pluck("verifier_instance_id")->first();                                $verificationParam->readOnly = true;                                $verificationParam->instanceId = $otherInstanceId;                                array_push($tempFormData['types'], $verificationParam);                            }                        }                    }                }                $verificationParam = \App\Models\FormType::with(["categories.groups.questions.options","categories.groups.questions.skipLogic.skipLogicDetails","categories.groups.questions.questionSettingOptions","categories.groups.questions.questionSettingAppearance","categories.groups.questions.questionAssignment"])->where("form_id", $form->id)->where("parameter_type", "verification")->where("parameter_level", @$verificationList[$verification->confirmation_level])->first();                if(isset($verificationParam)){                    $verificationParam->readOnly = false;                    $verificationParam->instanceId = $verification->verifier_instance_id;                    array_push($tempFormData['types'], $verificationParam);                }                //inject answers to object                if(isset($tempFormData['types']))                foreach($tempFormData['types'] as $type)                {                    if(isset($type->categories))                    foreach($type->categories as $category)                    {                        if(isset($category->groups))                        foreach($category->groups as $group)                        {                            if(isset($group->questions))                            foreach($group->questions as $question)                            {                                if($question){                                    $answersCount = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $instanceId)->where("question_id", $question->id)->count();                                    if($answersCount == 0 && in_array($question->name_en, array('Name of Governorate?','Name of District?','Name of the Site?','Name of Cluster?'))){                                        $instance = \App\Models\SurveillanceFormInstance::find($instanceId);                                        if($question->name_en == 'Name of Governorate?')                                            $question->answer = $instance->governorate_id;                                        else if(trim($question->name_en) == 'Name of District?')                                            $question->answer = $instance->district_id;                                        else if(trim($question->name_en) == 'Name of Site?' || trim($question->name_en) == 'Name of the Site?')                                            $question->answer = $instance->site_id;                                        else if($question->name_en == 'Name of Cluster?')                                            $question->answer = $instance->cluster_id;                                    }else{                                        $answersCount = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $type->instanceId)->where("question_id", $question->id)->count();                                        if($answersCount > 1){                                            $responseList = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $type->instanceId)->where("question_id", $question->id)->pluck("value","value")->toArray();                                            if($question->response_type_id == 7){                                                $iTemp = 0;                                                $tempList = [];                                                foreach($responseList as $response)                                                    $tempList[($iTemp++ == 0)?'lat':'lng'] = $response;                                                $responseList = $tempList;                                            }else{                                                $tempItemList = [];                                                foreach($responseList as $item){                                                    $tempItemList[] = (int)$item;                                                }                                                $responseList = $tempItemList;                                            }                                            $question->answer = $responseList;                                        }                                        else{                                            $obj = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $type->instanceId)->where("question_id", $question->id)->first();                                            if($question->response_type_id == 2){                                                if (preg_match("/single/", json_encode($question->setting)) || preg_match("/dropdown/", json_encode($question->setting)))                                                    $question->answer = ($obj?(int)$obj->value:null);                                                else                                                    $question->answer = ($obj?[(int)$obj->value]:[]);                                            }                                            else                                                $question->answer = ($obj?(is_numeric($obj->value)?(int)$obj->value:$obj->value):"");                                        }                                    }                                }                            }                        }                    }                }                return $this->successData($tempFormData);        }        /**        * Get the project collection instance data and its details.        * @vars $instanceId        * @return \Illuminate\Http\Response        */        public function getCollectionInstanceData()        {                ini_set('memory_limit','-1');                set_time_limit(6000);                $instanceId = (int)@request("instance_id");                $formInstance = \App\Models\SurveillanceFormInstance::find($instanceId);                $form = \App\Models\Form::where("project_id", $formInstance->project_id)->first();                if (!$formInstance)                        return $this->failed("Invalid Form Instance Id");                $diseaseId = $formInstance->disease_id;                $disease = \App\Models\DiseaseBank::where("id", $diseaseId)->first();                if($disease){                    $formCategory = \App\Models\FormCategory::where("form_id", $form->id)->where("name_en", "LIKE", $disease->appearance_name_en)->first();                    if (!$formCategory) {                        return $this->failed("Invalid Form Category");                    }                }else                    return $this->failed("Invalid Disease Id");                $formTypeId = (int)@$formCategory->form_type_id;                $formData = \App\Models\PushToMobile::where("form_id", $form->id)->orderBy("id", "desc")->pluck("response_data")->first();                if (!$formData) {                        return $this->failed("Invalid Form Id");                }else                    $formData = json_decode($formData);                $tempFormData['id'] = $formData->id;                $tempFormData['project_id'] = $formData->project_id;                $tempFormData['is_mobile'] = $formData->is_mobile;                foreach ($formData->types as $type){                    if(isset($type->parameter_type) && in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name'))){                        $tempFormData['types'][] = $type;                    }                }                $FormTypeData = \App\Models\FormType::find($formTypeId);                $FormTypeData['categories'] = \App\Models\FormCategory::where("id", $formCategory->id)->with(["groups.questions.options","groups.questions.skipLogic.skipLogicDetails","groups.questions.questionSettingOptions","groups.questions.questionSettingAppearance","groups.questions.questionAssignment"])->get();                if(is_array($tempFormData['types']))                    array_push($tempFormData['types'], $FormTypeData);                $FormTypeData2 = \App\Models\FormType::where("name_en","Individual Information")->first();                $FormTypeData2['categories'] = \App\Models\FormCategory::where("form_type_id", $FormTypeData2->id)->with(["groups.questions.options","groups.questions.skipLogic.skipLogicDetails","groups.questions.questionSettingOptions","groups.questions.questionSettingAppearance","groups.questions.questionAssignment"])->get();                if(is_array($tempFormData['types']))                    array_push($tempFormData['types'], $FormTypeData2);                foreach ($formData->types as $type){                    if(isset($type->parameter_type) && $type->parameter_type == 'collection' && $type->name_en != "Parameter Disease" && $type->name_en != "Individual Information" && !in_array($type->name_en, array('Governorate','District','Site/ Sub District','Cluster/ Camp Name/ PHC Name'))){                        $tempFormData['types'][] = $type;                    }                }                //inject answers to object                if(isset($tempFormData['types']))                foreach($tempFormData['types'] as $type)                {                    if(isset($type->categories))                    foreach($type->categories as $category)                    {                        if(isset($category->groups))                        foreach($category->groups as $group)                        {                            if(isset($group->questions))                            foreach($group->questions as $question)                            {                                if($question){                                    $answersCount = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $instanceId)->where("question_id", $question->id)->count();                                    if($answersCount == 0 && in_array($question->name_en, array('Name of Governorate?','Name of District?','Name of the Site?','Name of Cluster?'))){                                        $instance = \App\Models\SurveillanceFormInstance::find($instanceId);                                        if($question->name_en == 'Name of Governorate?')                                            $question->answer = $instance->governorate_id;                                        else if(trim($question->name_en) == 'Name of District?')                                            $question->answer = $instance->district_id;                                        else if(trim($question->name_en) == 'Name of Site?' || trim($question->name_en) == 'Name of the Site?')                                            $question->answer = $instance->site_id;                                        else if($question->name_en == 'Name of Cluster?')                                            $question->answer = $instance->cluster_id;                                    }else{                                        if($answersCount > 1){                                            $responseList = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $instanceId)->where("question_id", $question->id)->pluck("value","value")->toArray();                                            if($question->response_type_id == 7){                                                $iTemp = 0;                                                $tempList = [];                                                foreach($responseList as $response)                                                    $tempList[($iTemp++ == 0)?'lat':'lng'] = $response;                                                $responseList = $tempList;                                            }else{                                                $tempItemList = [];                                                foreach($responseList as $item){                                                    $tempItemList[] = (int)$item;                                                }                                                $responseList = $tempItemList;                                            }                                            $question->answer = $responseList;                                        }else{                                            $obj = \App\Models\SurveillanceQuestionAnswer::where("surveillance_form_instance_id", $instanceId)->where("question_id", $question->id)->first();                                            if($question->response_type_id == 2){                                                if (preg_match("/single/", json_encode($question->setting)) || preg_match("/dropdown/", json_encode($question->setting)))                                                    $question->answer = ($obj?(int)$obj->value:null);                                                else                                                    $question->answer = ($obj?[$obj->value]:[]);                                            }                                            else                                                $question->answer = ($obj?(is_numeric($obj->value)?(int)$obj->value:$obj->value):"");                                        }                                    }                                }                            }                        }                    }                }                return $this->successData($tempFormData);        }        /**        * Get the user project list        * @vars $filterType        * @return \Illuminate\Http\Response        */        public function userProjcts()        {            $projects = Project::where("project_type", 'surveillance')		                    ->where("status", 1)                                    ->whereHas('members', function ($q) {			                     $q->where('user_id', $this->user->id);		                     })                                    ->pluck("name","id")->toArray();            $projectList = [];            foreach($projects as $id => $name){                $projectList[] = ['id'=>$id,'name'=>$name];            }            return $this->successData($projectList);        }        /**        * Function send email on immediate disease collection        * @param $diseaseName        * @param $formInstance        */       public function sendAdditionalsNotification($diseaseName, $projectId, $additionals)       {            $project = \App\Models\Project::find($projectId);            if(isset($project->created_by) && $project->created_by>0)            {                $user = \App\Models\User::find($project->created_by);                $sender = \App\Models\User::find($this->user->id);                $cluster = "";                $view = 'emails.immediate-disease';                $data['email'] = $user->username;                $data['user'] = $user->name;                $data['diseaseName'] = $diseaseName;                $data['collector'] = $sender->name;                $data['clusterName'] = "";                $data['cases'] = $additionals;                $data['dateTime'] = date("Y-m-d H:i:s");                $subject = 'Immediate Disease Case - '.$sender->name;                Mail::send($view, $data, function ($message) use ($user, $sender, $subject) {                    $message->from($sender->email, $sender->name);                    //$message->replyTo($sender->email, $sender->name);                    $message->to($user->email)->subject($subject);                });            }       }}