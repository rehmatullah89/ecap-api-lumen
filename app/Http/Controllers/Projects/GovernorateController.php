<?php/* * This file is part of the IdeaToLife package. * * (c) Youssef Jradeh <youssef.jradeh@ideatolife.me> * */namespace App\Http\Controllers\Projects;use Excel;use App\Http\Controllers\WhoController;use App\Models\Governorate;use App\Models\SiteReference;use App\Models\District;use App\Models\ClusterReference;use Idea\Helpers\Paging;use App\Models\ProjectDetail;use App\Models\ProjectLocationDetail;use Illuminate\Support\Facades\DB;use Illuminate\Pagination\Paginator;use Illuminate\Pagination\LengthAwarePaginator;class GovernorateController extends WhoController {		public $filePath = "sites/";		protected $permissions = [		"index" => ["code" => "site_configuration", "action" => "read"],	];		/**	 *	 * @return array	 */	protected static function validationRules() {		return [                    'store'  => [                    "name"           => "required|unique:governorates,name",                    ],                    'update' => [                    "name"           => "required",                    ],                ];	}		/**	 * Display a listing of the resource.	 *	 * @return \Illuminate\Http\Response	 */	public function index() {		return $this->successData(Governorate::get());	}                /**        * Store a newly created resource in storage.        *        * @return \Illuminate\Http\Response        */       public function store()        {           $governorate = new Governorate();           $governorate->name = request("name");           $governorate->save();           return $this->successData($governorate);       }       /**        * Update the specified resource in storage.        *        * @param int $id        *        * @return \Illuminate\Http\Response        */       public function update($id)        {           $governorate = Governorate::find($id);           if (!$governorate) {               return $this->failed("Invalid Governorate");           }                      if(Governorate::where("name", "LIKE", request("name"))->where("id", "!=", $id)->count() > 0){               return $this->failed("Governorate Name already exists!");           }           $governorate->name = request("name");           $governorate->save();           return $this->successData($governorate);       }                /**        * Display the specified resource.        *        * @param int $id        *        * @return \Illuminate\Http\Response        */       public function one($id)        {           $governorate = Governorate::find($id);           if (!$governorate) {               return $this->failed("Invalid Governorate Id");           }           return $this->successData($governorate);       }            /**	 * Display a listing of the resource.	 *	 * @return \Illuminate\Http\Response	 */	public function search() {             // checking for the search query            $projectId = (int)request("project_id");            $project = \App\Models\Project::find($projectId);                        $searchQuery = !empty(request('query')) ? request('query') : "";            $data = Governorate::where(function ($q) use ($searchQuery, $projectId, $project) {                $q->where('name', 'LIKE', "%" . $searchQuery . "%");                                if($projectId>0 && $project->project_type == 'survey')                {                    $sites = \App\Models\ProjectDetail::where("project_id", $projectId)->pluck("site_id","site_id")->toArray();                    $governorates = \App\Models\SiteReference::whereIn("id", $sites)->pluck("governorate_id","governorate_id")->toArray();                    $q->whereIn("id", $governorates);                }                            })->take(10)->get();                        return $this->successData($data);	}                Private function searchLocationData($array, $search_list)         {               $result = array();             foreach ($array as $key => $value) {                                 foreach ($search_list as $k => $v) {                                         if (!isset($value[$k]) || $value[$k] != $v)                     {                         continue 2;                     }                 }                 $result[] = $value;             }             return $result;         }                 public function locationsData()        {            $governorateId = (int)request("governorate_id");            $districtId = (int)request("district_id");            $siteId = (int)request("site_id");            $clusterId = (int)request("cluster_id");                        $currentPage = request('page', 1);                        $locationData = [];                        $dataList = \App\Models\Governorate::with("districts.sites.clusters")                        ->where(function ($q) use ($governorateId) {                            if ($governorateId > 0)                                $q->where('id', $governorateId);                            else                                $q->where('id', "!=", 0);                        })                        ->orderBy("name")->get()->toArray();                        foreach($dataList as $data){                                $governorateName = $data['name'];                array_push($locationData, array('governorate_name'=>$governorateName, 'governorate_id'=>$data['id'], 'district_name'=>"", 'district_id'=>0, 'site_name'=>"", 'site_id'=>0, 'cluster_name'=>"", 'cluster_id'=>0, 'lat'=>"", 'lng'=>""));                                if(isset($data['districts'])){                    foreach($data['districts'] as $district)                    {                        $districtName = $district['name'];                        array_push($locationData, array('governorate_name'=>$governorateName, 'governorate_id'=>$data['id'], 'district_name'=>$districtName, 'district_id'=>$district['id'], 'site_name'=>"", 'site_id'=>0, 'cluster_name'=>"", 'cluster_id'=>0, 'lat'=>"", 'lng'=>""));                                                if(isset($district['sites'])){                            foreach($district['sites'] as $site)                            {                                $siteName = $site['name'];                                array_push($locationData, array('governorate_name'=>$governorateName, 'governorate_id'=>$data['id'], 'district_name'=>$districtName, 'district_id'=>$district['id'], 'site_name'=>$siteName, 'site_id'=>$site['id'], 'cluster_name'=>"", 'cluster_id'=>0, 'lat'=>"", 'lng'=>""));                                                                if(isset($site['clusters'])){                                    foreach($site['clusters'] as $cluster)                                    {                                        $clusterName = $cluster['name'];                                        $latitude = $cluster['lat'];                                        $longitude = $cluster['lng'];                                                                                array_push($locationData, array('governorate_name'=>$governorateName, 'governorate_id'=>$data['id'], 'district_name'=>$districtName, 'district_id'=>$district['id'], 'site_name'=>$siteName, 'site_id'=>$site['id'], 'cluster_name'=>$clusterName, 'cluster_id'=>$cluster['id'], 'lat'=>$latitude, 'lng'=>$longitude));                                    }                                }                                                            }                        }                    }                }            }            $searchItems = array();            if(($districtId > 0 || $siteId > 0 || $clusterId > 0) && !empty($locationData))            {                if($districtId > 0)                    $searchItems += array('district_id' => $districtId);                                if($siteId > 0)                    $searchItems += array('site_id' => $siteId);                if($clusterId > 0)                    $searchItems += array('cluster_id' => $clusterId);                                             $locationData = $this->searchLocationData($locationData, $searchItems);            }                        $locationData = collect($locationData);            $collection = $this->paginateCollection($locationData, 10);            $collection = json_decode(json_encode($collection), true);                        $itemList = array();            if(isset($collection['data']) && count($collection['data'])>0){                foreach($collection['data'] as $key => $item){                    array_push($itemList, $item);                }            }            $dataList = array('items'=>$itemList, 'current_page'=>$collection['current_page'], 'from'=>$collection['from'], 'last_page'=>$collection['last_page'], 'next_page_url'=>$collection['next_page_url'], 'path'=>$collection['path'], 'per_page'=>$collection['per_page'], 'prev_page_url'=>$collection['prev_page_url'], 'to'=>$collection['to'], 'total'=>$collection['total']);                                return $this->successData($dataList);        }                function paginateCollection($collection, $perPage, $pageName = 'page', $fragment = null)        {            $currentPage = \Illuminate\Pagination\LengthAwarePaginator::resolveCurrentPage($pageName);            $currentPageItems = $collection->slice(($currentPage - 1) * $perPage, $perPage);            parse_str(request()->getQueryString(), $query);            unset($query[$pageName]);            $paginator = new \Illuminate\Pagination\LengthAwarePaginator(                $currentPageItems,                $collection->count(),                $perPage,                $currentPage,                [                    'pageName' => $pageName,                    'path' => \Illuminate\Pagination\LengthAwarePaginator::resolveCurrentPath(),                    'query' => $query,                    'fragment' => $fragment                ]            );            return $paginator;        }        /**        * the following method is used to download the Location template file        *        * @return void        */        public function downloadLocationTemplate(){            return response()->download(public_path()."/Location_Management_Template.xlsx", "Location_Management_Template.xlsx", ['Content-Type: application/vnd.ms-excel']);        }       /**        * the following method is used to export Locations list        *        * @return void        */        public function exportLocations()        {            $locationData[] = [0=>'Governorate',1=>'District',2=>'Site',3=>'Cluster',4=>'Latitude',5=>'Longitude'];                        $dataList = \App\Models\Governorate::with("districts.sites.clusters")->orderBy("name")->get()->toArray();                        foreach($dataList as $data){                                $governorateName = $data['name'];                array_push($locationData, array(0=>$governorateName, 1=>"", 2=>"", 3=>"", 4=>"", 5=>""));                                if(isset($data['districts'])){                    foreach($data['districts'] as $district)                    {                        $districtName = $district['name'];                        array_push($locationData, array(0=>$governorateName, 1=>$districtName, 2=>"", 3=>"", 4=>"", 5=>""));                                                if(isset($district['sites'])){                            foreach($district['sites'] as $site)                            {                                $siteName = $site['name'];                                array_push($locationData, array(0=>$governorateName, 1=>$districtName, 2=>$siteName, 3=>"", 4=>"", 5=>""));                                                                if(isset($site['clusters'])){                                    foreach($site['clusters'] as $cluster)                                    {                                        $clusterName = $cluster['name'];                                        $latitude = $cluster['lat'];                                        $longitude = $cluster['lng'];                                                                                array_push($locationData, array(0=>$governorateName, 1=>$districtName, 2=>$siteName, 3=>$clusterName, 4=>$latitude, 5=>$longitude));                                    }                                }                                                            }                        }                    }                }            }                        //delete temporary table            \Excel::create(                "locations",                function ($excel) use ($locationData) {                    // Set the title                    $excel->setTitle('Export Locations');                    // Chain the setters                    $excel->setCreator('IdeatoLife')->setCompany('IdeatoLife');                        // creating the sheet and filling it with parameter data                        $excel->sheet(                            'Locations', function ($sheet) use ($locationData) {                                $sheet->rows($locationData);                            }                        );                    }            )->store('xls', "/tmp");            //PDF file is stored under project/public/download/info.pdf            $file = "/tmp/locations.xls";            $headers = [                'Content-Type: application/vnd.ms-excel',            ];            //results_export            return response()->download($file, "Locations-Export-".date("Ymd - H:i").".xls", $headers);        }                public function importLocations()         {            if (!$this->request->hasFile("import_file")) {                return $this->failed('Invalid Excel File');            }                            Excel::load(                $this->request->file('import_file')                    ->getRealPath(), function ($reader) {                        $tab = 0;                                            $dataList = $reader->toArray();                         $governorates = array_flip(array_map('trim', array_map('strtolower', Governorate::pluck("name","id")->toArray())));                        $districts = array_flip(array_map('trim', array_map('strtolower', District::pluck("name","id")->toArray())));                        $sites = array_flip(array_map('trim', array_map('strtolower', SiteReference::pluck("name","id")->toArray())));                        $clusters = array_flip(array_map('trim', array_map('strtolower', ClusterReference::pluck("name","id")->toArray())));                                                if(count($dataList)>0)                                foreach ($dataList as $key => $value) {                                                 try {                                            $governorate = strtolower(trim($value['governorate']));                                            $district = strtolower(trim($value['district']));                                            $site = strtolower(trim($value['site']));                                            $cluster = strtolower(trim($value['cluster']));                                            $latitude = trim($value['latitude']);                                                 $longitude = trim($value['longitude']);                                                                                             if($governorate != "")                                            {                                                $governorateObj = Governorate::find((int)@$governorates[$governorate]);                                                if(!$governorateObj){                                                    $governorateObj = new Governorate();                                                    $governorateObj->name = trim($value['governorate']);                                                    $governorateObj->save();                                                }                                                                                                 if(!empty($district))                                                {                                                    $districtObj = District::find((int)@$districts[$district]);                                                    if(!$districtObj){                                                        $districtObj = new District();                                                        $districtObj->name = trim($value['district']);                                                        $districtObj->governorate_id = $governorateObj->id;                                                        $districtObj->save();                                                    }                                                }                                                                                                if(!empty($district) && !empty($site))                                                {                                                    $siteObj = SiteReference::find((int)@$sites[$site]);                                                    if(!$siteObj){                                                        $siteObj = new SiteReference();                                                        $siteObj->name = trim($value['site']);                                                        $siteObj->description = trim($value['site']);                                                        $siteObj->governorate_id = $governorateObj->id;                                                        $siteObj->district_id = $districtObj->id;                                                        $siteObj->save();                                                    }                                                }                                                                                                if(!empty($district) && !empty($site) && !empty($cluster) && !empty($latitude) && !empty($longitude))                                                {                                                    $clusterObj = ClusterReference::find((int)@$clusters[$cluster]);                                                    if(!$clusterObj){                                                        $clusterObj = new ClusterReference();                                                        $clusterObj->name = trim($value['cluster']);                                                        $clusterObj->description = trim($value['cluster']);                                                        $clusterObj->site_id = $siteObj->id;                                                        $clusterObj->lat = $latitude;                                                        $clusterObj->lng = $longitude;                                                        $clusterObj->save();                                                    }                                                }                                                                                            }                                    } catch (\Exception $exception) {                                        throw $exception;                                        continue;                                    }                            }                    }        );        $this->removeDuplicateSites();                return $this->success();            }            /*        * Remove duplicate sites from old data and clean data         * */        public function removeDuplicateSites()        {            ini_set('memory_limit','-1');            set_time_limit(6000);            try{                \DB::statement("ALTER TABLE `form_instances` DROP FOREIGN KEY `form_instances_site_id_foreign`");            }catch (\Exception $e) {            }            $this->removeDuplicateGovernorates();            $this->removeDuplicateDistricts();            $this->removeDuplicateClusters();            $sites = \DB::select("SELECT count(1) as count, name, GROUP_CONCAT(id SEPARATOR ',') as siteIds FROM site_references where deleted_at IS NULL group by name having count(1)>1");            foreach($sites as $obj)            {                $siteIds = explode(",", $obj->siteIds);                $firstSiteId = $siteIds[0];                $clusters = ClusterReference::whereIn("site_id", $siteIds)->first();                $projectDetail = ProjectDetail::whereIn("site_id", $siteIds)->first();                $projectLocationDetail = ProjectLocationDetail::whereIn("site_id", $siteIds)->first();                $formInstance = \App\Models\FormInstance::whereIn("site_id", $siteIds)->first();                $indicatorResults = \App\Models\IndicatorResults::whereIn("site_id", $siteIds)->first();                if(empty($clusters) && empty($projectDetail) && empty($projectLocationDetail) && empty($formInstance) && empty($indicatorResults)){                    SiteReference::where("id", "!=", $firstSiteId)->whereIn("id", $siteIds)->delete();                }                else if(empty($clusters) && !empty($siteIds))                {                    SiteReference::where("id", "!=", $firstSiteId)->whereIn("id", $siteIds)->delete();                }                else{                    if($clusters){                        SiteReference::where("id", "!=", $clusters->site_id)->whereIn("id", $siteIds)->delete();                        ProjectDetail::where("site_id", "!=", $clusters->site_id)->whereIn("site_id", $siteIds)->delete();                        ProjectLocationDetail::where("site_id", "!=", $clusters->site_id)->whereIn("site_id", $siteIds)->delete();                        \DB::table('cluster_references')->whereIn("site_id", $siteIds)->update(['site_id' => $clusters->site_id]);                        \DB::table('form_instances')->whereIn("site_id", $siteIds)->update(['site_id' => $clusters->site_id]);                        \DB::table('indicators_results')->whereIn("site_id", $siteIds)->update(['site_id' => $clusters->site_id]);                    }                }            }            //Strict Items to Remove            $removeSites = [16,18,40,41,151,153];            $removeClusters = [57,58,59,60,130,131,132,477,478,479,480];            ProjectDetail::whereIn("site_id",$removeSites)->orWhereIn("cluster_id",$removeClusters)->delete();            ProjectLocationDetail::whereIn("site_id",$removeSites)->orWhereIn("cluster_id",$removeClusters)->delete();            \App\Models\IndicatorResults::whereIn("site_id",$removeSites)->orWhereIn("cluster_id",$removeClusters)->delete();            \App\Models\FormInstance::whereIn("site_id",$removeSites)->orWhereIn("cluster_id",$removeClusters)->delete();            ClusterReference::whereIn("site_id",$removeSites)->orWhereIn("id",$removeClusters)->delete();            SiteReference::whereIn("id", $removeSites)->delete();            return $this->successData();        }                /*        * Remove duplicate governorates locations data         * */        private function removeDuplicateGovernorates()        {            $governorates = \App\Models\Governorate::get();            foreach($governorates as $governorate){                $governorate->name = trim($governorate->name);                $governorate->save();            }            $governorates = \DB::select("SELECT count(1) as count, name, GROUP_CONCAT(id SEPARATOR ',') as governorateIds FROM governorates where deleted_at IS NULL group by name having count>1 Order By id");            foreach($governorates as $obj)            {                $governorateIds = explode(",", $obj->governorateIds);                $firstGovernorateId = $governorateIds[0];                $projectDetail = ProjectDetail::whereIn("governorate_id", $governorateIds)->first();                $projectLocationDetail = ProjectLocationDetail::whereIn("governorate_id", $governorateIds)->first();                $formInstance = \App\Models\FormInstance::whereIn("governorate_id", $governorateIds)->first();                $indicatorResults = \App\Models\IndicatorResults::whereIn("governorate_id", $governorateIds)->first();                if(empty($projectDetail) && empty($projectLocationDetail) && empty($formInstance) && empty($indicatorResults)){                    \App\Models\Governorate::where("id", "!=", $firstGovernorateId)->whereIn("id", $governorateIds)->delete();                }                else{                                        \App\Models\Governorate::where("id", "!=", $firstGovernorateId)->whereIn("id", $governorateIds)->delete();                        ProjectDetail::where("governorate_id", "!=", $firstGovernorateId)->whereIn("governorate_id", $governorateIds)->delete();                        ProjectLocationDetail::where("governorate_id", "!=", $firstGovernorateId)->whereIn("governorate_id", $governorateIds)->delete();                        \DB::table('form_instances')->whereIn("governorate_id", $governorateIds)->update(['governorate_id' => $firstGovernorateId]);                        \DB::table('indicators_results')->whereIn("governorate_id", $governorateIds)->update(['governorate_id' => $firstGovernorateId]);                                }                        }                }        /*        * Remove duplicate districts data and clean data         * */        public function removeDuplicateDistricts()        {            $districts = \App\Models\District::get();            foreach($districts as $district){                $district->name = trim($district->name);                $district->save();            }            $districts = \DB::select("SELECT count(1) as count, name, GROUP_CONCAT(id SEPARATOR ',') as districtIds FROM districts where deleted_at IS NULL group by name having count>1 Order By id");            foreach($districts as $obj)            {                $districtIds = explode(",", $obj->districtIds);                $firstDistrictId = $districtIds[0];                $sitesData = SiteReference::whereIn("district_id", $districtIds)->first();                $projectDetail = ProjectDetail::whereIn("district_id", $districtIds)->first();                $projectLocationDetail = ProjectLocationDetail::whereIn("district_id", $districtIds)->first();                $formInstance = \App\Models\FormInstance::whereIn("district_id", $districtIds)->first();                $indicatorResults = \App\Models\IndicatorResults::whereIn("district_id", $districtIds)->first();                if(empty($sitesData) && empty($projectDetail) && empty($projectLocationDetail) && empty($formInstance) && empty($indicatorResults)){                    \App\Models\District::where("id", "!=", $firstDistrictId)->whereIn("id", $districtIds)->delete();                }                else{                                        \App\Models\District::where("id", "!=", $firstDistrictId)->whereIn("id", $districtIds)->delete();                        ProjectDetail::where("district_id", "!=", $firstDistrictId)->whereIn("district_id", $districtIds)->delete();                        ProjectLocationDetail::where("district_id", "!=", $firstDistrictId)->whereIn("district_id", $districtIds)->delete();                        \DB::table('site_references')->whereIn("district_id", $districtIds)->update(['district_id' => $firstDistrictId]);                        \DB::table('form_instances')->whereIn("district_id", $districtIds)->update(['district_id' => $firstDistrictId]);                        \DB::table('indicators_results')->whereIn("district_id", $districtIds)->update(['district_id' => $firstDistrictId]);                                }            }        }        /*        * Remove duplicate clusters data and clean data         * */        public function removeDuplicateClusters()        {            $clusters = \App\Models\ClusterReference::get();            foreach($clusters as $cluster){                $cluster->name = trim($cluster->name);                $cluster->save();            }            $clusters = \DB::select("SELECT count(1) as count, name, GROUP_CONCAT(id SEPARATOR ',') as clusterIds FROM cluster_references where deleted_at IS NULL group by name having count>1 Order By id");            foreach($clusters as $obj)            {                $clustersIds = explode(",", $obj->clusterIds);                $firstClusterId = $clustersIds[0];                $projectDetail = ProjectDetail::whereIn("cluster_id", $clustersIds)->first();                $projectLocationDetail = ProjectLocationDetail::whereIn("cluster_id", $clustersIds)->first();                $formInstance = \App\Models\FormInstance::whereIn("cluster_id", $clustersIds)->first();                $indicatorResults = \App\Models\IndicatorResults::whereIn("cluster_id", $clustersIds)->first();                if(empty($projectDetail) && empty($projectLocationDetail) && empty($formInstance) && empty($indicatorResults)){                    \App\Models\ClusterReference::where("id", "!=", $firstClusterId)->whereIn("id", $clustersIds)->delete();                }                else{                                        \App\Models\ClusterReference::where("id", "!=", $firstClusterId)->whereIn("id", $clustersIds)->delete();                        ProjectDetail::where("cluster_id", "!=", $firstClusterId)->whereIn("cluster_id", $clustersIds)->delete();                        ProjectLocationDetail::where("cluster_id", "!=", $firstClusterId)->whereIn("cluster_id", $clustersIds)->delete();                        \DB::table('form_instances')->whereIn("cluster_id", $clustersIds)->update(['cluster_id' => $firstClusterId]);                        \DB::table('indicators_results')->whereIn("cluster_id", $clustersIds)->update(['cluster_id' => $firstClusterId]);                                }            }        }        /**        * Remove the specified resource from storage.        *        * @param int $id        *        * @return \Illuminate\Http\Response        */       public function destroy($id)        {           try {               if (!$governorate = Governorate::find($id)) {                   return $this->failed("Invalid Governorate");               }               if((int)@\App\Models\SiteReference::where('governorate_id', $id)->count() == 0 && (int)@District::where('governorate_id', $id)->count() == 0){                    $governorate->delete();               }else                   return $this->failed("Please remove first related data to remove this resourse.");               return $this->success('Governorate Deleted');           } catch (\Exception $e) {               return $this->failed('destroy error');           }       }}