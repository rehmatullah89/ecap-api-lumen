<?php/* * This file is part of the IdeaToLife package. * * (c) Youssef Jradeh <youssef.jradeh@ideatolife.me> * */namespace App\Http\Controllers\User;use App\Http\Controllers\WhoController;use App\Models\Group;use Idea\Helpers\Paging;use App\Models\GroupMember;class GroupController extends WhoController {		public $filePath = "teams/";		protected $permissions = [		"index"   => ["code" => "teams", "action" => "read"],		"one"     => ["code" => "teams", "action" => "read"],		"store"   => ["code" => "teams", "action" => "write"],		"update"  => ["code" => "teams", "action" => "write"],		"destroy" => ["code" => "teams", "action" => "write"],	];		/**	 *	 * @return array	 */	protected static function validationRules() {		return [			'store'  => [				"name"       => "required|unique:groups,name",			],			'update' => [				"name"       => "required",			],		];	}		/**	 * Display a listing of the resource.	 *	 * @return \Illuminate\Http\Response	 */	public function index() {                                $groupType = request('group_type');		$searchQuery = !empty(@request('query')) ? request('query') : "";                $startLimit  = request('limit_start') != "" ? request('limit_start') : -1;                $endLimit    = request('limit_end') != "" ? request('limit_end') : -1;                                if($startLimit >= 0 && $endLimit >= 0 && $endLimit >= $startLimit)                {                    $query = Group::where(function ($q) use ($searchQuery) {                                            if(!empty($searchQuery))                                $q->where('name', 'LIKE', "%" . $searchQuery . "%");                               else                                $q->where('id', '!=', 0);                                                                       })                        ->where(function ($q) use ($groupType){                            if($groupType == 'surveillance')                                $q->where('group_type', $groupType)->orWhere('group_type', 'both');                            else                                $q->where('group_type', 'survey')->orWhere('group_type', 'both');                        })                        ->has("members", ">=", $startLimit)                        ->has("members", "<=", $endLimit)                                ->with("members")->withCount("members");                    return $this->successData(new Paging($query));                }                else{                    $query = Group::where(function ($q) use ($searchQuery) {                                        if(!empty($searchQuery))                            $q->where('name', 'LIKE', "%" . $searchQuery . "%");                           else                            $q->where('id', '!=', 0);                                                                   })                    ->where(function ($q) use ($groupType){                            if($groupType == 'surveillance')                                $q->where('group_type', $groupType)->orWhere('group_type', 'both');                            else                                $q->where('group_type', 'survey')->orWhere('group_type', 'both');                    })                    ->with("members")->withCount("members");                    if(@request('page') == 0)                        return $this->successData($query->get());                    else                        return $this->successData(new Paging($query));                }                    	}                 /**        * Get/Search users.        *        * @param $id        *         * @return \Illuminate\Http\Response        */       public function searchMembers()       {           $searchQuery = !empty(@request('query')) ? request('query') : "";           $searchGroup = !empty(@request('group_id')) ? request('group_id') : "";           if(!empty($searchGroup))           {               $members = GroupMember::where("group_id", $searchGroup)->pluck("user_id");                               $query = \Idea\Models\User::where(function ($q) use ($searchQuery) {                                   if(!empty($searchQuery))                       $q->where('name', 'LIKE', "%" . $searchQuery . "%");                      else                       $q->where('id', '!=', 0);                                                              })               ->whereIn("id", $members)                       ->take(50)               ->get();           }           else{                           $query = \Idea\Models\User::where(function ($q) use ($searchQuery) {                                        if(!empty($searchQuery))                            $q->where('name', 'LIKE', "%" . $searchQuery . "%");                           else                            $q->where('id', '!=', 0);                                                                   })                    ->take(50)                    ->get();           }                      return $this->success('Success', $query);       }		/**	 * Display the specified resource.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function one($id) {                        $data = Group::find($id);            $members = GroupMember::where("group_id", $id)->pluck("user_id");                        $data["members"] = $members;            $data["members_detail"] = \Idea\Models\User::whereIn("id", $members)->get();                                return $this->successData($data);	}		/**	 * Store a newly created resource in storage.	 *	 * @return \Illuminate\Http\Response	 */	public function store() {                $groupType = request('group_type');            		$group             = new Group();		$group->name       = request("name");                $group->group_type = ($groupType != ""?$groupType:'both');		$group->description= request("description");		$group->save();		                 //add members                $members = request("members");//json_decode(request("members"));//                if(isset($members) && !empty(@$members)){                    foreach($members as $memberId)                    {                        $groupMembers = new GroupMember();                        $groupMembers->group_id = $group->id;                        $groupMembers->user_id = $memberId;                        $groupMembers->save();                    }                }                                return $this->success('success', Group::with("members")->find($group->id));	}		/**	 * Update the specified resource in storage.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function update($id) {				$group = Group::with("members")->find($id);		if (!$group) {			return $this->failed("Invalid Group");		}		$group->name       = request("name");		$group->description= request("description");		$group->save();                                //add members                $notTodeleteMembers = [];                $members = request("members");//json_decode(request("members"));//                if(isset($members) && !empty(@$members)){                    foreach($members as $memberId)                    {                        $groupMem      = GroupMember::where("group_id", $id)->where("user_id", $memberId)->get();                        $groupMembers  = count($groupMem) > 0 ? @($groupMem[0]) : new GroupMember();                        $groupMembers->user_id = (count($groupMem) > 0)?$groupMem[0]->user_id:$memberId;                        $groupMembers->group_id = $id;                        $groupMembers->save();                                                $notTodeleteMembers[] = $groupMembers->id;                                            }                    GroupMember::where("group_id", $id)->whereNotIn("id", $notTodeleteMembers)->delete();                }else                    GroupMember::where("group_id", $id)->delete();		                $data = Group::with("members")->find($group->id);                $data["memebers_detail"] = request("members");                		return $this->success('success', $data);	}		/**	 * Remove the specified resource from storage.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function destroy($id) {		try {			if (!$group = Group::find($id)) {				return $this->failed("Invalid Group");			}						 // remove row from the database			$group->delete();			                        GroupMember::where("group_id", $id)->delete();                                			return $this->success('Group deleted');		} catch (\Exception $e) {			return $this->failed('destroy error');		}	}}