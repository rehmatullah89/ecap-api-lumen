<?php/* * This file is part of the IdeaToLife package. * * (c) Youssef Jradeh <youssef.jradeh@ideatolife.me> * */namespace App\Http\Controllers\User;use App\Http\Controllers\WhoController;use App\Models\Team;use App\Models\TeamCluster;use Idea\Helpers\Paging;class TeamController extends WhoController {		public $filePath = "teams/";		protected $permissions = [		"index"   => ["code" => "teams", "action" => "read"],		"one"     => ["code" => "teams", "action" => "read"],		"store"   => ["code" => "teams", "action" => "write"],		"update"  => ["code" => "teams", "action" => "write"],		"destroy" => ["code" => "teams", "action" => "write"],	];		/**	 *	 * @return array	 */	protected static function validationRules() {		return [			'index'  => [				'project_id' => 'required|exists:projects,id',			],			'store'  => [				"name"       => "required",				'site_id'    => 'required|exists:site_references,id',				'project_id' => 'required|exists:projects,id',				'clusters.*' => 'required|exists:cluster_references,id',			],			'update' => [				"name"       => "required",				'clusters.*' => 'required|exists:cluster_references,id',			],		];	}		/**	 * Display a listing of the resource.	 *	 * @return \Illuminate\Http\Response	 */	public function index() {				$query = Team::where("project_id", request("project_id"))->with("clusters","site.clusters");				return $this->successData(new Paging($query));	}		/**	 * Display the specified resource.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function one($id) {		return $this->successData(Team::with("clusters")->find($id));	}		/**	 * Store a newly created resource in storage.	 *	 * @return \Illuminate\Http\Response	 */	public function store() {				$team             = new Team();		$team->name       = request("name");		$team->project_id = request("project_id");		$team->site_id    = request("site_id");		$team->save();				$clusters = request("clusters");				if (!empty($clusters)) {			foreach ($clusters AS $clusterId) {				$teamCluster             = new TeamCluster();				$teamCluster->team_id    = $team->id;				$teamCluster->cluster_id = $clusterId;				$teamCluster->save();			}		}				return $this->one($team->id);	}		/**	 * Update the specified resource in storage.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function update($id) {				$team = Team::with("clusters","site")->find($id);		if (!$team) {			return $this->failed("Invalid Team");		}		$team->name = request("name");		$team->save();				//delete all existing		TeamCluster::where("team_id",$team->id)->delete();				//then add the new clusters		$clusters = request("clusters");		if (!empty($clusters)) {						foreach ($clusters AS $clusterId) {				$teamCluster             = new TeamCluster();				$teamCluster->team_id    = $team->id;				$teamCluster->cluster_id = $clusterId;				$teamCluster->save();			}		}				return $this->one($team->id);	}		/**	 * Remove the specified resource from storage.	 *	 * @param  int $id	 *	 * @return \Illuminate\Http\Response	 */	public function destroy($id) {		try {			if (!$team = Team::find($id)) {				return $this->failed("Invalid Team");			}						//delete all existing child			TeamCluster::where("team_id",$team->id)->delete();						//then delete the row from the database			$team->delete();						return $this->success('Team deleted');		} catch (\Exception $e) {			return $this->failed('destroy error');		}	}}